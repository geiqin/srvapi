// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: customer.proto

package geiqin_srv_crm

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CustomerService service

type CustomerService interface {
	//手动添加用户
	Create(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error)
	//手动添加单位用户
	CreateCompany(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error)
	//手动修改单位用户
	UpdateCompany(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error)
	//从粉丝添加用户
	CreateByFan(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error)
	//客户注册
	Register(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error)
	//修改客户
	Update(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error)
	//删除客户
	Delete(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error)
	//锁定客户
	Lock(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error)
	//解锁客户
	Unlock(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error)
	//获得客户
	Get(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error)
	//获得客户详情
	Detail(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error)
	//根据ids获得客户
	List(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error)
	//查询客户
	Search(ctx context.Context, in *CustomerWhere, opts ...client.CallOption) (*CustomerResponse, error)
	//设置会员标签
	SetTags(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error)
	//设置会员卡
	SetCards(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error)
	//修改客户手机号
	UpdateMobile(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error)
}

type customerService struct {
	c    client.Client
	name string
}

func NewCustomerService(name string, c client.Client) CustomerService {
	return &customerService{
		c:    c,
		name: name,
	}
}

func (c *customerService) Create(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.Create", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) CreateCompany(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.CreateCompany", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) UpdateCompany(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.UpdateCompany", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) CreateByFan(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.CreateByFan", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) Register(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.Register", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) Update(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.Update", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) Delete(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.Delete", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) Lock(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.Lock", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) Unlock(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.Unlock", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) Get(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.Get", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) Detail(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.Detail", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) List(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.List", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) Search(ctx context.Context, in *CustomerWhere, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.Search", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) SetTags(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.SetTags", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) SetCards(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.SetCards", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) UpdateMobile(ctx context.Context, in *Customer, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.UpdateMobile", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CustomerService service

type CustomerServiceHandler interface {
	//手动添加用户
	Create(context.Context, *Customer, *CustomerResponse) error
	//手动添加单位用户
	CreateCompany(context.Context, *Customer, *CustomerResponse) error
	//手动修改单位用户
	UpdateCompany(context.Context, *Customer, *CustomerResponse) error
	//从粉丝添加用户
	CreateByFan(context.Context, *Customer, *CustomerResponse) error
	//客户注册
	Register(context.Context, *Customer, *CustomerResponse) error
	//修改客户
	Update(context.Context, *Customer, *CustomerResponse) error
	//删除客户
	Delete(context.Context, *Customer, *CustomerResponse) error
	//锁定客户
	Lock(context.Context, *Customer, *CustomerResponse) error
	//解锁客户
	Unlock(context.Context, *Customer, *CustomerResponse) error
	//获得客户
	Get(context.Context, *Customer, *CustomerResponse) error
	//获得客户详情
	Detail(context.Context, *Customer, *CustomerResponse) error
	//根据ids获得客户
	List(context.Context, *Customer, *CustomerResponse) error
	//查询客户
	Search(context.Context, *CustomerWhere, *CustomerResponse) error
	//设置会员标签
	SetTags(context.Context, *Customer, *CustomerResponse) error
	//设置会员卡
	SetCards(context.Context, *Customer, *CustomerResponse) error
	//修改客户手机号
	UpdateMobile(context.Context, *Customer, *CustomerResponse) error
}

func RegisterCustomerServiceHandler(s server.Server, hdlr CustomerServiceHandler, opts ...server.HandlerOption) error {
	type customerService interface {
		Create(ctx context.Context, in *Customer, out *CustomerResponse) error
		CreateCompany(ctx context.Context, in *Customer, out *CustomerResponse) error
		UpdateCompany(ctx context.Context, in *Customer, out *CustomerResponse) error
		CreateByFan(ctx context.Context, in *Customer, out *CustomerResponse) error
		Register(ctx context.Context, in *Customer, out *CustomerResponse) error
		Update(ctx context.Context, in *Customer, out *CustomerResponse) error
		Delete(ctx context.Context, in *Customer, out *CustomerResponse) error
		Lock(ctx context.Context, in *Customer, out *CustomerResponse) error
		Unlock(ctx context.Context, in *Customer, out *CustomerResponse) error
		Get(ctx context.Context, in *Customer, out *CustomerResponse) error
		Detail(ctx context.Context, in *Customer, out *CustomerResponse) error
		List(ctx context.Context, in *Customer, out *CustomerResponse) error
		Search(ctx context.Context, in *CustomerWhere, out *CustomerResponse) error
		SetTags(ctx context.Context, in *Customer, out *CustomerResponse) error
		SetCards(ctx context.Context, in *Customer, out *CustomerResponse) error
		UpdateMobile(ctx context.Context, in *Customer, out *CustomerResponse) error
	}
	type CustomerService struct {
		customerService
	}
	h := &customerServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CustomerService{h}, opts...))
}

type customerServiceHandler struct {
	CustomerServiceHandler
}

func (h *customerServiceHandler) Create(ctx context.Context, in *Customer, out *CustomerResponse) error {
	return h.CustomerServiceHandler.Create(ctx, in, out)
}

func (h *customerServiceHandler) CreateCompany(ctx context.Context, in *Customer, out *CustomerResponse) error {
	return h.CustomerServiceHandler.CreateCompany(ctx, in, out)
}

func (h *customerServiceHandler) UpdateCompany(ctx context.Context, in *Customer, out *CustomerResponse) error {
	return h.CustomerServiceHandler.UpdateCompany(ctx, in, out)
}

func (h *customerServiceHandler) CreateByFan(ctx context.Context, in *Customer, out *CustomerResponse) error {
	return h.CustomerServiceHandler.CreateByFan(ctx, in, out)
}

func (h *customerServiceHandler) Register(ctx context.Context, in *Customer, out *CustomerResponse) error {
	return h.CustomerServiceHandler.Register(ctx, in, out)
}

func (h *customerServiceHandler) Update(ctx context.Context, in *Customer, out *CustomerResponse) error {
	return h.CustomerServiceHandler.Update(ctx, in, out)
}

func (h *customerServiceHandler) Delete(ctx context.Context, in *Customer, out *CustomerResponse) error {
	return h.CustomerServiceHandler.Delete(ctx, in, out)
}

func (h *customerServiceHandler) Lock(ctx context.Context, in *Customer, out *CustomerResponse) error {
	return h.CustomerServiceHandler.Lock(ctx, in, out)
}

func (h *customerServiceHandler) Unlock(ctx context.Context, in *Customer, out *CustomerResponse) error {
	return h.CustomerServiceHandler.Unlock(ctx, in, out)
}

func (h *customerServiceHandler) Get(ctx context.Context, in *Customer, out *CustomerResponse) error {
	return h.CustomerServiceHandler.Get(ctx, in, out)
}

func (h *customerServiceHandler) Detail(ctx context.Context, in *Customer, out *CustomerResponse) error {
	return h.CustomerServiceHandler.Detail(ctx, in, out)
}

func (h *customerServiceHandler) List(ctx context.Context, in *Customer, out *CustomerResponse) error {
	return h.CustomerServiceHandler.List(ctx, in, out)
}

func (h *customerServiceHandler) Search(ctx context.Context, in *CustomerWhere, out *CustomerResponse) error {
	return h.CustomerServiceHandler.Search(ctx, in, out)
}

func (h *customerServiceHandler) SetTags(ctx context.Context, in *Customer, out *CustomerResponse) error {
	return h.CustomerServiceHandler.SetTags(ctx, in, out)
}

func (h *customerServiceHandler) SetCards(ctx context.Context, in *Customer, out *CustomerResponse) error {
	return h.CustomerServiceHandler.SetCards(ctx, in, out)
}

func (h *customerServiceHandler) UpdateMobile(ctx context.Context, in *Customer, out *CustomerResponse) error {
	return h.CustomerServiceHandler.UpdateMobile(ctx, in, out)
}

// Client API for MyCustomerService service

type MyCustomerService interface {
	// 修改密码
	ChangePwd(ctx context.Context, in *CustomerWhere, opts ...client.CallOption) (*CustomerResponse, error)
}

type myCustomerService struct {
	c    client.Client
	name string
}

func NewMyCustomerService(name string, c client.Client) MyCustomerService {
	return &myCustomerService{
		c:    c,
		name: name,
	}
}

func (c *myCustomerService) ChangePwd(ctx context.Context, in *CustomerWhere, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.name, "MyCustomerService.ChangePwd", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyCustomerService service

type MyCustomerServiceHandler interface {
	// 修改密码
	ChangePwd(context.Context, *CustomerWhere, *CustomerResponse) error
}

func RegisterMyCustomerServiceHandler(s server.Server, hdlr MyCustomerServiceHandler, opts ...server.HandlerOption) error {
	type myCustomerService interface {
		ChangePwd(ctx context.Context, in *CustomerWhere, out *CustomerResponse) error
	}
	type MyCustomerService struct {
		myCustomerService
	}
	h := &myCustomerServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MyCustomerService{h}, opts...))
}

type myCustomerServiceHandler struct {
	MyCustomerServiceHandler
}

func (h *myCustomerServiceHandler) ChangePwd(ctx context.Context, in *CustomerWhere, out *CustomerResponse) error {
	return h.MyCustomerServiceHandler.ChangePwd(ctx, in, out)
}
