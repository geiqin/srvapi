// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vipcard.proto

package geiqin_srv_crm

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VipcardWhere struct {
	Useable              bool     `protobuf:"varint,1,opt,name=useable,proto3" json:"useable,omitempty"`
	CustomerId           int64    `protobuf:"varint,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Number               string   `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	CardMethod           int32    `protobuf:"varint,4,opt,name=card_method,json=cardMethod,proto3" json:"card_method,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VipcardWhere) Reset()         { *m = VipcardWhere{} }
func (m *VipcardWhere) String() string { return proto.CompactTextString(m) }
func (*VipcardWhere) ProtoMessage()    {}
func (*VipcardWhere) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8280ff148761e10, []int{0}
}

func (m *VipcardWhere) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VipcardWhere.Unmarshal(m, b)
}
func (m *VipcardWhere) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VipcardWhere.Marshal(b, m, deterministic)
}
func (m *VipcardWhere) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VipcardWhere.Merge(m, src)
}
func (m *VipcardWhere) XXX_Size() int {
	return xxx_messageInfo_VipcardWhere.Size(m)
}
func (m *VipcardWhere) XXX_DiscardUnknown() {
	xxx_messageInfo_VipcardWhere.DiscardUnknown(m)
}

var xxx_messageInfo_VipcardWhere proto.InternalMessageInfo

func (m *VipcardWhere) GetUseable() bool {
	if m != nil {
		return m.Useable
	}
	return false
}

func (m *VipcardWhere) GetCustomerId() int64 {
	if m != nil {
		return m.CustomerId
	}
	return 0
}

func (m *VipcardWhere) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *VipcardWhere) GetCardMethod() int32 {
	if m != nil {
		return m.CardMethod
	}
	return 0
}

type Vipcard struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	CardId               int32    `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id"`
	CustomerId           int64    `protobuf:"varint,3,opt,name=customer_id,json=customerId,proto3" json:"customer_id"`
	Number               string   `protobuf:"bytes,4,opt,name=number,proto3" json:"number"`
	Issuer               string   `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer"`
	OpenDate             string   `protobuf:"bytes,6,opt,name=open_date,json=openDate,proto3" json:"open_date"`
	ValidateDate         string   `protobuf:"bytes,7,opt,name=validate_date,json=validateDate,proto3" json:"validate_date"`
	CreatedAt            string   `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            string   `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Card                 *Card    `protobuf:"bytes,10,opt,name=card,proto3" json:"card,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vipcard) Reset()         { *m = Vipcard{} }
func (m *Vipcard) String() string { return proto.CompactTextString(m) }
func (*Vipcard) ProtoMessage()    {}
func (*Vipcard) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8280ff148761e10, []int{1}
}

func (m *Vipcard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vipcard.Unmarshal(m, b)
}
func (m *Vipcard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vipcard.Marshal(b, m, deterministic)
}
func (m *Vipcard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vipcard.Merge(m, src)
}
func (m *Vipcard) XXX_Size() int {
	return xxx_messageInfo_Vipcard.Size(m)
}
func (m *Vipcard) XXX_DiscardUnknown() {
	xxx_messageInfo_Vipcard.DiscardUnknown(m)
}

var xxx_messageInfo_Vipcard proto.InternalMessageInfo

func (m *Vipcard) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Vipcard) GetCardId() int32 {
	if m != nil {
		return m.CardId
	}
	return 0
}

func (m *Vipcard) GetCustomerId() int64 {
	if m != nil {
		return m.CustomerId
	}
	return 0
}

func (m *Vipcard) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *Vipcard) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *Vipcard) GetOpenDate() string {
	if m != nil {
		return m.OpenDate
	}
	return ""
}

func (m *Vipcard) GetValidateDate() string {
	if m != nil {
		return m.ValidateDate
	}
	return ""
}

func (m *Vipcard) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Vipcard) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Vipcard) GetCard() *Card {
	if m != nil {
		return m.Card
	}
	return nil
}

//
type VipcardResponse struct {
	Entity               *Vipcard   `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Pager                *Pager     `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager,omitempty"`
	Items                []*Vipcard `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	Error                *Error     `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Info                 *Info      `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *VipcardResponse) Reset()         { *m = VipcardResponse{} }
func (m *VipcardResponse) String() string { return proto.CompactTextString(m) }
func (*VipcardResponse) ProtoMessage()    {}
func (*VipcardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8280ff148761e10, []int{2}
}

func (m *VipcardResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VipcardResponse.Unmarshal(m, b)
}
func (m *VipcardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VipcardResponse.Marshal(b, m, deterministic)
}
func (m *VipcardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VipcardResponse.Merge(m, src)
}
func (m *VipcardResponse) XXX_Size() int {
	return xxx_messageInfo_VipcardResponse.Size(m)
}
func (m *VipcardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VipcardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VipcardResponse proto.InternalMessageInfo

func (m *VipcardResponse) GetEntity() *Vipcard {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *VipcardResponse) GetPager() *Pager {
	if m != nil {
		return m.Pager
	}
	return nil
}

func (m *VipcardResponse) GetItems() []*Vipcard {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *VipcardResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *VipcardResponse) GetInfo() *Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterType((*VipcardWhere)(nil), "geiqin.srv.crm.VipcardWhere")
	proto.RegisterType((*Vipcard)(nil), "geiqin.srv.crm.Vipcard")
	proto.RegisterType((*VipcardResponse)(nil), "geiqin.srv.crm.VipcardResponse")
}

func init() { proto.RegisterFile("vipcard.proto", fileDescriptor_c8280ff148761e10) }

var fileDescriptor_c8280ff148761e10 = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xd1, 0x6a, 0xdb, 0x3e,
	0x14, 0xc6, 0xff, 0x8e, 0x63, 0x27, 0x39, 0x49, 0xf3, 0x07, 0xb1, 0xb5, 0x5e, 0xb6, 0x51, 0x93,
	0xdd, 0x18, 0xc6, 0x32, 0xc8, 0x9e, 0x20, 0x6b, 0xb6, 0x12, 0xd8, 0x60, 0xa8, 0xb0, 0x5d, 0x06,
	0xc5, 0x3a, 0x6d, 0x04, 0xb1, 0xe5, 0x49, 0x4a, 0x46, 0x6f, 0xf7, 0x3e, 0xbb, 0xdb, 0xab, 0xed,
	0x7e, 0x48, 0xb2, 0x19, 0x0d, 0x4d, 0x29, 0xe4, 0xf2, 0x9c, 0xef, 0x77, 0x3e, 0x7d, 0x3a, 0xc2,
	0x86, 0x93, 0x9d, 0xa8, 0x72, 0xa6, 0xf8, 0xa4, 0x52, 0xd2, 0x48, 0x32, 0xbc, 0x41, 0xf1, 0x5d,
	0x94, 0x13, 0xad, 0x76, 0x93, 0x5c, 0x15, 0xa3, 0x41, 0x2e, 0x8b, 0x42, 0x96, 0x5e, 0x1d, 0xc1,
	0x3f, 0x72, 0xfc, 0x33, 0x80, 0xc1, 0x57, 0x3f, 0xfb, 0x6d, 0x8d, 0x0a, 0x49, 0x02, 0x9d, 0xad,
	0x46, 0xb6, 0xda, 0x60, 0x12, 0xa4, 0x41, 0xd6, 0xa5, 0x4d, 0x49, 0xce, 0xa1, 0x9f, 0x6f, 0xb5,
	0x91, 0x05, 0xaa, 0xa5, 0xe0, 0x49, 0x2b, 0x0d, 0xb2, 0x90, 0x42, 0xd3, 0x5a, 0x70, 0x72, 0x0a,
	0x71, 0xb9, 0x2d, 0x56, 0xa8, 0x92, 0x30, 0x0d, 0xb2, 0x1e, 0xad, 0x2b, 0x37, 0xc8, 0x14, 0x5f,
	0x16, 0x68, 0xd6, 0x92, 0x27, 0xed, 0x34, 0xc8, 0x22, 0xea, 0x42, 0x7c, 0x76, 0x9d, 0xf1, 0xaf,
	0x16, 0x74, 0xea, 0x10, 0x64, 0x08, 0x2d, 0xc1, 0xdd, 0xd1, 0x21, 0x6d, 0x09, 0x4e, 0xce, 0xa0,
	0xe3, 0x86, 0xeb, 0x13, 0x23, 0x1a, 0xdb, 0x72, 0xc1, 0xf7, 0xe3, 0x84, 0x0f, 0xc4, 0x69, 0xdf,
	0x89, 0x73, 0x0a, 0xb1, 0xd0, 0x7a, 0x8b, 0x2a, 0x89, 0x7c, 0xdf, 0x57, 0xe4, 0x39, 0xf4, 0x64,
	0x85, 0xe5, 0x92, 0x33, 0x83, 0x49, 0xec, 0xa4, 0xae, 0x6d, 0xcc, 0x99, 0x41, 0xf2, 0x0a, 0x4e,
	0x76, 0x6c, 0x23, 0xac, 0xe6, 0x81, 0x8e, 0x03, 0x06, 0x4d, 0xd3, 0x41, 0x2f, 0x01, 0x72, 0x85,
	0xcc, 0x20, 0x5f, 0x32, 0x93, 0x74, 0x1d, 0xd1, 0xab, 0x3b, 0x33, 0x63, 0xe5, 0x6d, 0xc5, 0x1b,
	0xb9, 0xe7, 0xe5, 0xba, 0x33, 0x33, 0x24, 0x83, 0xb6, 0xbd, 0x5a, 0x02, 0x69, 0x90, 0xf5, 0xa7,
	0x4f, 0x26, 0x77, 0xdf, 0x70, 0x72, 0xc1, 0x14, 0xa7, 0x8e, 0x18, 0xff, 0x09, 0xe0, 0xff, 0x7a,
	0x5f, 0x14, 0x75, 0x25, 0x4b, 0x8d, 0xe4, 0x2d, 0xc4, 0x58, 0x1a, 0x61, 0x6e, 0xdd, 0xee, 0xfa,
	0xd3, 0xb3, 0xfd, 0xf9, 0x66, 0xa0, 0xc6, 0xc8, 0x6b, 0x88, 0x2a, 0x76, 0x83, 0xca, 0xad, 0xb5,
	0x3f, 0x7d, 0xba, 0xcf, 0x7f, 0xb1, 0x22, 0xf5, 0x0c, 0x79, 0x03, 0x91, 0x30, 0x58, 0xe8, 0x24,
	0x4c, 0xc3, 0x87, 0xcc, 0x3d, 0x65, 0xbd, 0x51, 0x29, 0xe9, 0x37, 0x7f, 0x8f, 0xf7, 0x07, 0x2b,
	0x52, 0xcf, 0xd8, 0x7b, 0x8b, 0xf2, 0x5a, 0xba, 0xd7, 0xb8, 0xe7, 0xde, 0x8b, 0xf2, 0x5a, 0x52,
	0x47, 0x4c, 0x7f, 0x87, 0x30, 0xac, 0x4f, 0xba, 0x42, 0xb5, 0x13, 0x39, 0x92, 0x0b, 0x88, 0x66,
	0x55, 0xb5, 0xb9, 0x25, 0x87, 0x22, 0x8d, 0xce, 0x0f, 0x65, 0xad, 0x37, 0x37, 0xfe, 0xcf, 0x9a,
	0x50, 0x2c, 0xf1, 0xc7, 0x51, 0x26, 0x73, 0x88, 0xe7, 0xb8, 0x41, 0x83, 0x47, 0xb9, 0xcc, 0x20,
	0xbc, 0x44, 0x73, 0x94, 0xc5, 0x25, 0xb4, 0x3f, 0x09, 0x6d, 0xc8, 0x8b, 0x03, 0xa8, 0xfb, 0xce,
	0x1f, 0x63, 0xf4, 0x11, 0xe2, 0x2b, 0x64, 0x2a, 0x5f, 0x93, 0x67, 0xfb, 0xf0, 0x7b, 0xa6, 0xf1,
	0xb1, 0x3e, 0xab, 0xd8, 0xfd, 0x6a, 0xde, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xe1, 0xbf,
	0x86, 0xa5, 0x04, 0x00, 0x00,
}
