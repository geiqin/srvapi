// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: vipcard.proto

package geiqin_srv_crm

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for VipcardService service

type VipcardService interface {
	Apply(ctx context.Context, in *Vipcard, opts ...client.CallOption) (*VipcardResponse, error)
	Renew(ctx context.Context, in *Vipcard, opts ...client.CallOption) (*VipcardResponse, error)
	Delete(ctx context.Context, in *Id, opts ...client.CallOption) (*VipcardResponse, error)
	Get(ctx context.Context, in *Vipcard, opts ...client.CallOption) (*VipcardResponse, error)
	List(ctx context.Context, in *VipcardWhere, opts ...client.CallOption) (*VipcardResponse, error)
	Search(ctx context.Context, in *BaseWhere, opts ...client.CallOption) (*VipcardResponse, error)
}

type vipcardService struct {
	c    client.Client
	name string
}

func NewVipcardService(name string, c client.Client) VipcardService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "geiqin.srv.crm"
	}
	return &vipcardService{
		c:    c,
		name: name,
	}
}

func (c *vipcardService) Apply(ctx context.Context, in *Vipcard, opts ...client.CallOption) (*VipcardResponse, error) {
	req := c.c.NewRequest(c.name, "VipcardService.Apply", in)
	out := new(VipcardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipcardService) Renew(ctx context.Context, in *Vipcard, opts ...client.CallOption) (*VipcardResponse, error) {
	req := c.c.NewRequest(c.name, "VipcardService.Renew", in)
	out := new(VipcardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipcardService) Delete(ctx context.Context, in *Id, opts ...client.CallOption) (*VipcardResponse, error) {
	req := c.c.NewRequest(c.name, "VipcardService.Delete", in)
	out := new(VipcardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipcardService) Get(ctx context.Context, in *Vipcard, opts ...client.CallOption) (*VipcardResponse, error) {
	req := c.c.NewRequest(c.name, "VipcardService.Get", in)
	out := new(VipcardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipcardService) List(ctx context.Context, in *VipcardWhere, opts ...client.CallOption) (*VipcardResponse, error) {
	req := c.c.NewRequest(c.name, "VipcardService.List", in)
	out := new(VipcardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipcardService) Search(ctx context.Context, in *BaseWhere, opts ...client.CallOption) (*VipcardResponse, error) {
	req := c.c.NewRequest(c.name, "VipcardService.Search", in)
	out := new(VipcardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VipcardService service

type VipcardServiceHandler interface {
	Apply(context.Context, *Vipcard, *VipcardResponse) error
	Renew(context.Context, *Vipcard, *VipcardResponse) error
	Delete(context.Context, *Id, *VipcardResponse) error
	Get(context.Context, *Vipcard, *VipcardResponse) error
	List(context.Context, *VipcardWhere, *VipcardResponse) error
	Search(context.Context, *BaseWhere, *VipcardResponse) error
}

func RegisterVipcardServiceHandler(s server.Server, hdlr VipcardServiceHandler, opts ...server.HandlerOption) error {
	type vipcardService interface {
		Apply(ctx context.Context, in *Vipcard, out *VipcardResponse) error
		Renew(ctx context.Context, in *Vipcard, out *VipcardResponse) error
		Delete(ctx context.Context, in *Id, out *VipcardResponse) error
		Get(ctx context.Context, in *Vipcard, out *VipcardResponse) error
		List(ctx context.Context, in *VipcardWhere, out *VipcardResponse) error
		Search(ctx context.Context, in *BaseWhere, out *VipcardResponse) error
	}
	type VipcardService struct {
		vipcardService
	}
	h := &vipcardServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&VipcardService{h}, opts...))
}

type vipcardServiceHandler struct {
	VipcardServiceHandler
}

func (h *vipcardServiceHandler) Apply(ctx context.Context, in *Vipcard, out *VipcardResponse) error {
	return h.VipcardServiceHandler.Apply(ctx, in, out)
}

func (h *vipcardServiceHandler) Renew(ctx context.Context, in *Vipcard, out *VipcardResponse) error {
	return h.VipcardServiceHandler.Renew(ctx, in, out)
}

func (h *vipcardServiceHandler) Delete(ctx context.Context, in *Id, out *VipcardResponse) error {
	return h.VipcardServiceHandler.Delete(ctx, in, out)
}

func (h *vipcardServiceHandler) Get(ctx context.Context, in *Vipcard, out *VipcardResponse) error {
	return h.VipcardServiceHandler.Get(ctx, in, out)
}

func (h *vipcardServiceHandler) List(ctx context.Context, in *VipcardWhere, out *VipcardResponse) error {
	return h.VipcardServiceHandler.List(ctx, in, out)
}

func (h *vipcardServiceHandler) Search(ctx context.Context, in *BaseWhere, out *VipcardResponse) error {
	return h.VipcardServiceHandler.Search(ctx, in, out)
}
