// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: orderReceiver.proto

package geiqin_srv_ord_private

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OrderReceiverService service

type OrderReceiverService interface {
	Create(ctx context.Context, in *OrderReceiver, opts ...client.CallOption) (*OrderReceiverResponse, error)
	Update(ctx context.Context, in *OrderReceiver, opts ...client.CallOption) (*OrderReceiverResponse, error)
	Delete(ctx context.Context, in *OrderReceiver, opts ...client.CallOption) (*OrderReceiverResponse, error)
	Get(ctx context.Context, in *OrderReceiver, opts ...client.CallOption) (*OrderReceiverResponse, error)
	Search(ctx context.Context, in *BaseWhere, opts ...client.CallOption) (*OrderReceiverResponse, error)
}

type orderReceiverService struct {
	c    client.Client
	name string
}

func NewOrderReceiverService(name string, c client.Client) OrderReceiverService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "geiqin.srv.ord.private"
	}
	return &orderReceiverService{
		c:    c,
		name: name,
	}
}

func (c *orderReceiverService) Create(ctx context.Context, in *OrderReceiver, opts ...client.CallOption) (*OrderReceiverResponse, error) {
	req := c.c.NewRequest(c.name, "OrderReceiverService.Create", in)
	out := new(OrderReceiverResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReceiverService) Update(ctx context.Context, in *OrderReceiver, opts ...client.CallOption) (*OrderReceiverResponse, error) {
	req := c.c.NewRequest(c.name, "OrderReceiverService.Update", in)
	out := new(OrderReceiverResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReceiverService) Delete(ctx context.Context, in *OrderReceiver, opts ...client.CallOption) (*OrderReceiverResponse, error) {
	req := c.c.NewRequest(c.name, "OrderReceiverService.Delete", in)
	out := new(OrderReceiverResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReceiverService) Get(ctx context.Context, in *OrderReceiver, opts ...client.CallOption) (*OrderReceiverResponse, error) {
	req := c.c.NewRequest(c.name, "OrderReceiverService.Get", in)
	out := new(OrderReceiverResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReceiverService) Search(ctx context.Context, in *BaseWhere, opts ...client.CallOption) (*OrderReceiverResponse, error) {
	req := c.c.NewRequest(c.name, "OrderReceiverService.Search", in)
	out := new(OrderReceiverResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderReceiverService service

type OrderReceiverServiceHandler interface {
	Create(context.Context, *OrderReceiver, *OrderReceiverResponse) error
	Update(context.Context, *OrderReceiver, *OrderReceiverResponse) error
	Delete(context.Context, *OrderReceiver, *OrderReceiverResponse) error
	Get(context.Context, *OrderReceiver, *OrderReceiverResponse) error
	Search(context.Context, *BaseWhere, *OrderReceiverResponse) error
}

func RegisterOrderReceiverServiceHandler(s server.Server, hdlr OrderReceiverServiceHandler, opts ...server.HandlerOption) error {
	type orderReceiverService interface {
		Create(ctx context.Context, in *OrderReceiver, out *OrderReceiverResponse) error
		Update(ctx context.Context, in *OrderReceiver, out *OrderReceiverResponse) error
		Delete(ctx context.Context, in *OrderReceiver, out *OrderReceiverResponse) error
		Get(ctx context.Context, in *OrderReceiver, out *OrderReceiverResponse) error
		Search(ctx context.Context, in *BaseWhere, out *OrderReceiverResponse) error
	}
	type OrderReceiverService struct {
		orderReceiverService
	}
	h := &orderReceiverServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderReceiverService{h}, opts...))
}

type orderReceiverServiceHandler struct {
	OrderReceiverServiceHandler
}

func (h *orderReceiverServiceHandler) Create(ctx context.Context, in *OrderReceiver, out *OrderReceiverResponse) error {
	return h.OrderReceiverServiceHandler.Create(ctx, in, out)
}

func (h *orderReceiverServiceHandler) Update(ctx context.Context, in *OrderReceiver, out *OrderReceiverResponse) error {
	return h.OrderReceiverServiceHandler.Update(ctx, in, out)
}

func (h *orderReceiverServiceHandler) Delete(ctx context.Context, in *OrderReceiver, out *OrderReceiverResponse) error {
	return h.OrderReceiverServiceHandler.Delete(ctx, in, out)
}

func (h *orderReceiverServiceHandler) Get(ctx context.Context, in *OrderReceiver, out *OrderReceiverResponse) error {
	return h.OrderReceiverServiceHandler.Get(ctx, in, out)
}

func (h *orderReceiverServiceHandler) Search(ctx context.Context, in *BaseWhere, out *OrderReceiverResponse) error {
	return h.OrderReceiverServiceHandler.Search(ctx, in, out)
}
