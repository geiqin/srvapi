// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: crontab.proto

package geiqin_srv_ord_private

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OrderCrontabService service

type OrderCrontabService interface {
	// 自动关闭订单
	Close(ctx context.Context, in *Empty, opts ...client.CallOption) (*CrontabServiceResponse, error)
	// 订单自动收货
	Receipt(ctx context.Context, in *Empty, opts ...client.CallOption) (*CrontabServiceResponse, error)
}

type orderCrontabService struct {
	c    client.Client
	name string
}

func NewOrderCrontabService(name string, c client.Client) OrderCrontabService {
	return &orderCrontabService{
		c:    c,
		name: name,
	}
}

func (c *orderCrontabService) Close(ctx context.Context, in *Empty, opts ...client.CallOption) (*CrontabServiceResponse, error) {
	req := c.c.NewRequest(c.name, "OrderCrontabService.Close", in)
	out := new(CrontabServiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCrontabService) Receipt(ctx context.Context, in *Empty, opts ...client.CallOption) (*CrontabServiceResponse, error) {
	req := c.c.NewRequest(c.name, "OrderCrontabService.Receipt", in)
	out := new(CrontabServiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderCrontabService service

type OrderCrontabServiceHandler interface {
	// 自动关闭订单
	Close(context.Context, *Empty, *CrontabServiceResponse) error
	// 订单自动收货
	Receipt(context.Context, *Empty, *CrontabServiceResponse) error
}

func RegisterOrderCrontabServiceHandler(s server.Server, hdlr OrderCrontabServiceHandler, opts ...server.HandlerOption) error {
	type orderCrontabService interface {
		Close(ctx context.Context, in *Empty, out *CrontabServiceResponse) error
		Receipt(ctx context.Context, in *Empty, out *CrontabServiceResponse) error
	}
	type OrderCrontabService struct {
		orderCrontabService
	}
	h := &orderCrontabServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderCrontabService{h}, opts...))
}

type orderCrontabServiceHandler struct {
	OrderCrontabServiceHandler
}

func (h *orderCrontabServiceHandler) Close(ctx context.Context, in *Empty, out *CrontabServiceResponse) error {
	return h.OrderCrontabServiceHandler.Close(ctx, in, out)
}

func (h *orderCrontabServiceHandler) Receipt(ctx context.Context, in *Empty, out *CrontabServiceResponse) error {
	return h.OrderCrontabServiceHandler.Receipt(ctx, in, out)
}
