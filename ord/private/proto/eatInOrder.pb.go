// Code generated by protoc-gen-go. DO NOT EDIT.
// source: eatInOrder.proto

package geiqin_srv_ord_private

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SettlementRequestByEatIn struct {
	OrderId              int64    `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	UseTicketId          int64    `protobuf:"varint,2,opt,name=use_ticket_id,json=useTicketId,proto3" json:"use_ticket_id,omitempty"`
	IsUseJf              bool     `protobuf:"varint,3,opt,name=is_use_jf,json=isUseJf,proto3" json:"is_use_jf,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettlementRequestByEatIn) Reset()         { *m = SettlementRequestByEatIn{} }
func (m *SettlementRequestByEatIn) String() string { return proto.CompactTextString(m) }
func (*SettlementRequestByEatIn) ProtoMessage()    {}
func (*SettlementRequestByEatIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_3887eb45929c6e1e, []int{0}
}

func (m *SettlementRequestByEatIn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettlementRequestByEatIn.Unmarshal(m, b)
}
func (m *SettlementRequestByEatIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettlementRequestByEatIn.Marshal(b, m, deterministic)
}
func (m *SettlementRequestByEatIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettlementRequestByEatIn.Merge(m, src)
}
func (m *SettlementRequestByEatIn) XXX_Size() int {
	return xxx_messageInfo_SettlementRequestByEatIn.Size(m)
}
func (m *SettlementRequestByEatIn) XXX_DiscardUnknown() {
	xxx_messageInfo_SettlementRequestByEatIn.DiscardUnknown(m)
}

var xxx_messageInfo_SettlementRequestByEatIn proto.InternalMessageInfo

func (m *SettlementRequestByEatIn) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *SettlementRequestByEatIn) GetUseTicketId() int64 {
	if m != nil {
		return m.UseTicketId
	}
	return 0
}

func (m *SettlementRequestByEatIn) GetIsUseJf() bool {
	if m != nil {
		return m.IsUseJf
	}
	return false
}

// 结算确认清单
type SettlementConfirmByEatIn struct {
	Count                int32         `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Total                float32       `protobuf:"fixed32,2,opt,name=total,proto3" json:"total,omitempty"`
	Discount             float32       `protobuf:"fixed32,3,opt,name=discount,proto3" json:"discount,omitempty"`
	Amount               float32       `protobuf:"fixed32,4,opt,name=amount,proto3" json:"amount,omitempty"`
	UseTicketId          int64         `protobuf:"varint,5,opt,name=use_ticket_id,json=useTicketId,proto3" json:"use_ticket_id,omitempty"`
	AvailableTicketIds   []int64       `protobuf:"varint,6,rep,packed,name=available_ticket_ids,json=availableTicketIds,proto3" json:"available_ticket_ids,omitempty"`
	Items                []*BuyingItem `protobuf:"bytes,7,rep,name=items,proto3" json:"items,omitempty"`
	UseTicket            *CouponTicket `protobuf:"bytes,8,opt,name=use_ticket,json=useTicket,proto3" json:"use_ticket,omitempty"`
	MemberMoney          float32       `protobuf:"fixed32,10,opt,name=member_money,json=memberMoney,proto3" json:"member_money,omitempty"`
	LimitDiscountMoney   float32       `protobuf:"fixed32,11,opt,name=limit_discount_money,json=limitDiscountMoney,proto3" json:"limit_discount_money,omitempty"`
	RewardMoney          float32       `protobuf:"fixed32,12,opt,name=reward_money,json=rewardMoney,proto3" json:"reward_money,omitempty"`
	CouponMoney          float32       `protobuf:"fixed32,13,opt,name=coupon_money,json=couponMoney,proto3" json:"coupon_money,omitempty"`
	Integral             *Integral     `protobuf:"bytes,14,opt,name=integral,proto3" json:"integral,omitempty"`
	Food                 *OrderFood    `protobuf:"bytes,15,opt,name=food,proto3" json:"food,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SettlementConfirmByEatIn) Reset()         { *m = SettlementConfirmByEatIn{} }
func (m *SettlementConfirmByEatIn) String() string { return proto.CompactTextString(m) }
func (*SettlementConfirmByEatIn) ProtoMessage()    {}
func (*SettlementConfirmByEatIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_3887eb45929c6e1e, []int{1}
}

func (m *SettlementConfirmByEatIn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettlementConfirmByEatIn.Unmarshal(m, b)
}
func (m *SettlementConfirmByEatIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettlementConfirmByEatIn.Marshal(b, m, deterministic)
}
func (m *SettlementConfirmByEatIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettlementConfirmByEatIn.Merge(m, src)
}
func (m *SettlementConfirmByEatIn) XXX_Size() int {
	return xxx_messageInfo_SettlementConfirmByEatIn.Size(m)
}
func (m *SettlementConfirmByEatIn) XXX_DiscardUnknown() {
	xxx_messageInfo_SettlementConfirmByEatIn.DiscardUnknown(m)
}

var xxx_messageInfo_SettlementConfirmByEatIn proto.InternalMessageInfo

func (m *SettlementConfirmByEatIn) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SettlementConfirmByEatIn) GetTotal() float32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *SettlementConfirmByEatIn) GetDiscount() float32 {
	if m != nil {
		return m.Discount
	}
	return 0
}

func (m *SettlementConfirmByEatIn) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *SettlementConfirmByEatIn) GetUseTicketId() int64 {
	if m != nil {
		return m.UseTicketId
	}
	return 0
}

func (m *SettlementConfirmByEatIn) GetAvailableTicketIds() []int64 {
	if m != nil {
		return m.AvailableTicketIds
	}
	return nil
}

func (m *SettlementConfirmByEatIn) GetItems() []*BuyingItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *SettlementConfirmByEatIn) GetUseTicket() *CouponTicket {
	if m != nil {
		return m.UseTicket
	}
	return nil
}

func (m *SettlementConfirmByEatIn) GetMemberMoney() float32 {
	if m != nil {
		return m.MemberMoney
	}
	return 0
}

func (m *SettlementConfirmByEatIn) GetLimitDiscountMoney() float32 {
	if m != nil {
		return m.LimitDiscountMoney
	}
	return 0
}

func (m *SettlementConfirmByEatIn) GetRewardMoney() float32 {
	if m != nil {
		return m.RewardMoney
	}
	return 0
}

func (m *SettlementConfirmByEatIn) GetCouponMoney() float32 {
	if m != nil {
		return m.CouponMoney
	}
	return 0
}

func (m *SettlementConfirmByEatIn) GetIntegral() *Integral {
	if m != nil {
		return m.Integral
	}
	return nil
}

func (m *SettlementConfirmByEatIn) GetFood() *OrderFood {
	if m != nil {
		return m.Food
	}
	return nil
}

type SettlementConfirmByEatInResponse struct {
	Entity               *SettlementConfirmByEatIn   `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Pager                *Pager                      `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager,omitempty"`
	Items                []*SettlementConfirmByEatIn `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	Error                *Error                      `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Info                 *Info                       `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *SettlementConfirmByEatInResponse) Reset()         { *m = SettlementConfirmByEatInResponse{} }
func (m *SettlementConfirmByEatInResponse) String() string { return proto.CompactTextString(m) }
func (*SettlementConfirmByEatInResponse) ProtoMessage()    {}
func (*SettlementConfirmByEatInResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3887eb45929c6e1e, []int{2}
}

func (m *SettlementConfirmByEatInResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettlementConfirmByEatInResponse.Unmarshal(m, b)
}
func (m *SettlementConfirmByEatInResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettlementConfirmByEatInResponse.Marshal(b, m, deterministic)
}
func (m *SettlementConfirmByEatInResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettlementConfirmByEatInResponse.Merge(m, src)
}
func (m *SettlementConfirmByEatInResponse) XXX_Size() int {
	return xxx_messageInfo_SettlementConfirmByEatInResponse.Size(m)
}
func (m *SettlementConfirmByEatInResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SettlementConfirmByEatInResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SettlementConfirmByEatInResponse proto.InternalMessageInfo

func (m *SettlementConfirmByEatInResponse) GetEntity() *SettlementConfirmByEatIn {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *SettlementConfirmByEatInResponse) GetPager() *Pager {
	if m != nil {
		return m.Pager
	}
	return nil
}

func (m *SettlementConfirmByEatInResponse) GetItems() []*SettlementConfirmByEatIn {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *SettlementConfirmByEatInResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *SettlementConfirmByEatInResponse) GetInfo() *Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterType((*SettlementRequestByEatIn)(nil), "geiqin.srv.ord.private.SettlementRequestByEatIn")
	proto.RegisterType((*SettlementConfirmByEatIn)(nil), "geiqin.srv.ord.private.SettlementConfirmByEatIn")
	proto.RegisterType((*SettlementConfirmByEatInResponse)(nil), "geiqin.srv.ord.private.SettlementConfirmByEatInResponse")
}

func init() {
	proto.RegisterFile("eatInOrder.proto", fileDescriptor_3887eb45929c6e1e)
}

var fileDescriptor_3887eb45929c6e1e = []byte{
	// 689 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x96, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xc7, 0xc9, 0x77, 0x3a, 0x9b, 0xb6, 0xd4, 0x54, 0xd5, 0x12, 0x81, 0x94, 0x46, 0x14, 0xe5,
	0x14, 0x55, 0xa9, 0x90, 0x7a, 0xe0, 0x42, 0xbf, 0x44, 0x10, 0x55, 0xd1, 0xb6, 0x08, 0xe8, 0x25,
	0xda, 0x64, 0x67, 0x53, 0x43, 0xd6, 0x4e, 0x6d, 0x6f, 0x50, 0x8e, 0xbc, 0x21, 0x0f, 0x80, 0xc4,
	0x23, 0xf0, 0x0a, 0x68, 0x6d, 0xe7, 0x03, 0xb5, 0x1b, 0x52, 0x04, 0x27, 0x8e, 0x33, 0xf3, 0x9b,
	0x0f, 0x7b, 0xfe, 0x6b, 0x2d, 0xdc, 0x47, 0x5f, 0xb5, 0xd9, 0x99, 0x08, 0x50, 0x34, 0x87, 0x82,
	0x2b, 0x4e, 0xb6, 0xfa, 0x48, 0xaf, 0x29, 0x6b, 0x4a, 0x31, 0x6a, 0x72, 0x11, 0x34, 0x87, 0x82,
	0x8e, 0x7c, 0x85, 0xd5, 0x4a, 0x8f, 0x47, 0x11, 0x67, 0x86, 0xaa, 0x3a, 0x7c, 0x96, 0x52, 0xad,
	0x74, 0xe3, 0x31, 0x65, 0x7d, 0x6b, 0xad, 0xeb, 0xd0, 0x09, 0xe7, 0x81, 0x75, 0x6c, 0xf5, 0x78,
	0x3c, 0xe4, 0xec, 0x82, 0xf6, 0x3e, 0xa1, 0x6a, 0xb3, 0x90, 0x5b, 0xff, 0x1a, 0x65, 0x0a, 0xfb,
	0xc2, 0x1f, 0x18, 0xbb, 0x1e, 0x83, 0x7b, 0x8e, 0x4a, 0x0d, 0x30, 0x42, 0xa6, 0x3c, 0xbc, 0x8e,
	0x51, 0xaa, 0x83, 0xf1, 0x71, 0x32, 0x20, 0x79, 0x08, 0x65, 0x5d, 0xb6, 0x43, 0x03, 0x37, 0x53,
	0xcb, 0x34, 0x72, 0x5e, 0x49, 0xdb, 0xed, 0x80, 0xd4, 0x61, 0x35, 0x96, 0xd8, 0x51, 0xba, 0x7c,
	0x12, 0xcf, 0xea, 0xb8, 0x13, 0x4b, 0xb4, 0x2d, 0x03, 0x52, 0x85, 0x15, 0x2a, 0x3b, 0x09, 0xf6,
	0x31, 0x74, 0x73, 0xb5, 0x4c, 0xa3, 0xec, 0x95, 0xa8, 0x7c, 0x2b, 0xf1, 0x55, 0x58, 0xff, 0x9e,
	0x9f, 0xef, 0x7b, 0xc8, 0x59, 0x48, 0x45, 0x34, 0xe9, 0xbb, 0x09, 0x85, 0x1e, 0x8f, 0x99, 0xd2,
	0x4d, 0x0b, 0x9e, 0x31, 0x12, 0xaf, 0xe2, 0xca, 0x1f, 0xe8, 0x56, 0x59, 0xcf, 0x18, 0xa4, 0x0a,
	0xe5, 0x80, 0x4a, 0x83, 0xe7, 0x74, 0x60, 0x6a, 0x93, 0x2d, 0x28, 0xfa, 0x91, 0x8e, 0xe4, 0x75,
	0xc4, 0x5a, 0x37, 0x87, 0x2f, 0xdc, 0x1c, 0x7e, 0x17, 0x36, 0xfd, 0x91, 0x4f, 0x07, 0x7e, 0x77,
	0x30, 0x47, 0x4a, 0xb7, 0x58, 0xcb, 0x35, 0x72, 0x1e, 0x99, 0xc6, 0x26, 0x09, 0x92, 0xec, 0x43,
	0x81, 0x2a, 0x8c, 0xa4, 0x5b, 0xaa, 0xe5, 0x1a, 0x4e, 0xab, 0xde, 0xbc, 0x7d, 0xa7, 0xcd, 0x03,
	0xbd, 0xb7, 0xb6, 0xc2, 0xc8, 0x33, 0x09, 0xe4, 0x10, 0x60, 0x36, 0x8f, 0x5b, 0xae, 0x65, 0x1a,
	0x4e, 0xeb, 0x49, 0x5a, 0xfa, 0xe1, 0xdc, 0x5e, 0xbd, 0x95, 0xe9, 0xc8, 0x64, 0x1b, 0x2a, 0x11,
	0x46, 0x5d, 0x14, 0x9d, 0x88, 0x33, 0x1c, 0xbb, 0xa0, 0x8f, 0xec, 0x18, 0xdf, 0x69, 0xe2, 0x4a,
	0xce, 0x34, 0xa0, 0x11, 0x55, 0x9d, 0xc9, 0x0d, 0x59, 0xd4, 0xd1, 0x28, 0xd1, 0xb1, 0x23, 0x1b,
	0x32, 0x19, 0xdb, 0x50, 0x11, 0xf8, 0xd9, 0x17, 0x81, 0x25, 0x2b, 0xa6, 0xa8, 0xf1, 0x4d, 0x11,
	0x23, 0x35, 0x8b, 0xac, 0x1a, 0xc4, 0xf8, 0x0c, 0xf2, 0x1c, 0xca, 0x13, 0xd5, 0xb9, 0x6b, 0xfa,
	0x74, 0xb5, 0xb4, 0xd3, 0xb5, 0x2d, 0xe7, 0x4d, 0x33, 0xc8, 0x33, 0xc8, 0x87, 0x9c, 0x07, 0xee,
	0xba, 0xce, 0xdc, 0x4e, 0xcb, 0x3c, 0x9b, 0x7c, 0x00, 0x9e, 0xc6, 0xeb, 0x5f, 0xb3, 0x50, 0x4b,
	0x53, 0x98, 0x87, 0x72, 0xc8, 0x99, 0x44, 0xf2, 0x12, 0x8a, 0xc8, 0x14, 0x55, 0x63, 0x2d, 0x35,
	0xa7, 0xb5, 0x9b, 0x56, 0x3d, 0xb5, 0x92, 0xcd, 0x27, 0x7b, 0x50, 0x18, 0xfa, 0x7d, 0x14, 0x5a,
	0x9d, 0x4e, 0xeb, 0x71, 0x5a, 0xa1, 0x37, 0x09, 0xe4, 0x19, 0x96, 0x9c, 0x4c, 0x24, 0x93, 0xd3,
	0x92, 0xb9, 0x7b, 0x77, 0x2b, 0xa0, 0x3d, 0x28, 0xa0, 0x10, 0x5c, 0x68, 0x9d, 0x2f, 0x68, 0x7e,
	0x9c, 0x40, 0x9e, 0x61, 0xc9, 0x2e, 0xe4, 0x29, 0x0b, 0xb9, 0x16, 0xbf, 0xd3, 0x7a, 0x94, 0xbe,
	0x91, 0x90, 0x7b, 0x9a, 0x6c, 0xfd, 0xc8, 0xc3, 0x83, 0x53, 0xd3, 0x59, 0xdf, 0xf6, 0x39, 0x8a,
	0x11, 0xed, 0x21, 0xb9, 0x84, 0x92, 0x9d, 0x8b, 0xec, 0x2c, 0x56, 0xbd, 0x7d, 0x60, 0xaa, 0x4f,
	0x7f, 0x87, 0x99, 0xfd, 0xd4, 0xef, 0x91, 0xf7, 0x50, 0x3c, 0x8f, 0xbb, 0x11, 0x55, 0xcb, 0x96,
	0xde, 0x59, 0x28, 0x90, 0xb9, 0xca, 0x97, 0xe0, 0xbc, 0xa6, 0xc9, 0x63, 0x77, 0x91, 0x7c, 0xc7,
	0xa4, 0xbe, 0x30, 0xef, 0xdd, 0x15, 0x0a, 0x5c, 0xbe, 0xf6, 0x07, 0x28, 0xbd, 0x08, 0x82, 0x23,
	0x2a, 0xaf, 0xfe, 0xfa, 0xd8, 0x5f, 0x32, 0xb0, 0x71, 0x43, 0x0f, 0x64, 0x09, 0xe9, 0xfc, 0xfa,
	0xb8, 0x57, 0xf7, 0xef, 0x2c, 0xb6, 0xd9, 0x0c, 0x7d, 0x80, 0x19, 0xf5, 0x07, 0xbd, 0x97, 0x3d,
	0x6c, 0xeb, 0x5b, 0x16, 0x36, 0x6e, 0xd3, 0xdb, 0xbf, 0xdb, 0xdc, 0xff, 0x74, 0xbd, 0xdd, 0xa2,
	0xfe, 0x07, 0xd8, 0xfb, 0x19, 0x00, 0x00, 0xff, 0xff, 0x48, 0x4b, 0x3d, 0x27, 0x91, 0x08, 0x00,
	0x00,
}
