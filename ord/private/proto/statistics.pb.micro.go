// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: statistics.proto

package geiqin_srv_ord_private

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Statistics service

type StatisticsService interface {
	//获取订单统计数据
	OrderTotal(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderStatsResponse, error)
	//今日实时统计
	TodayTotal(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderDayStatsResponse, error)
	//获取订单近30日客单统计明细数据
	OrderDays(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderDayStatsResponse, error)
	//获取店铺未处理订单数量
	Unhandled(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderStatsResponse, error)
	//查询用户购买的商品
	CustomerGoods(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderStatsResponse, error)
	//获取用户订单统计数据
	CustomerOrder(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderStatsResponse, error)
}

type statisticsService struct {
	c    client.Client
	name string
}

func NewStatisticsService(name string, c client.Client) StatisticsService {
	return &statisticsService{
		c:    c,
		name: name,
	}
}

func (c *statisticsService) OrderTotal(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderStatsResponse, error) {
	req := c.c.NewRequest(c.name, "Statistics.OrderTotal", in)
	out := new(OrderStatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsService) TodayTotal(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderDayStatsResponse, error) {
	req := c.c.NewRequest(c.name, "Statistics.TodayTotal", in)
	out := new(OrderDayStatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsService) OrderDays(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderDayStatsResponse, error) {
	req := c.c.NewRequest(c.name, "Statistics.OrderDays", in)
	out := new(OrderDayStatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsService) Unhandled(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderStatsResponse, error) {
	req := c.c.NewRequest(c.name, "Statistics.Unhandled", in)
	out := new(OrderStatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsService) CustomerGoods(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderStatsResponse, error) {
	req := c.c.NewRequest(c.name, "Statistics.CustomerGoods", in)
	out := new(OrderStatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsService) CustomerOrder(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderStatsResponse, error) {
	req := c.c.NewRequest(c.name, "Statistics.CustomerOrder", in)
	out := new(OrderStatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Statistics service

type StatisticsHandler interface {
	//获取订单统计数据
	OrderTotal(context.Context, *StatsRequest, *OrderStatsResponse) error
	//今日实时统计
	TodayTotal(context.Context, *StatsRequest, *OrderDayStatsResponse) error
	//获取订单近30日客单统计明细数据
	OrderDays(context.Context, *StatsRequest, *OrderDayStatsResponse) error
	//获取店铺未处理订单数量
	Unhandled(context.Context, *StatsRequest, *OrderStatsResponse) error
	//查询用户购买的商品
	CustomerGoods(context.Context, *StatsRequest, *OrderStatsResponse) error
	//获取用户订单统计数据
	CustomerOrder(context.Context, *StatsRequest, *OrderStatsResponse) error
}

func RegisterStatisticsHandler(s server.Server, hdlr StatisticsHandler, opts ...server.HandlerOption) error {
	type statistics interface {
		OrderTotal(ctx context.Context, in *StatsRequest, out *OrderStatsResponse) error
		TodayTotal(ctx context.Context, in *StatsRequest, out *OrderDayStatsResponse) error
		OrderDays(ctx context.Context, in *StatsRequest, out *OrderDayStatsResponse) error
		Unhandled(ctx context.Context, in *StatsRequest, out *OrderStatsResponse) error
		CustomerGoods(ctx context.Context, in *StatsRequest, out *OrderStatsResponse) error
		CustomerOrder(ctx context.Context, in *StatsRequest, out *OrderStatsResponse) error
	}
	type Statistics struct {
		statistics
	}
	h := &statisticsHandler{hdlr}
	return s.Handle(s.NewHandler(&Statistics{h}, opts...))
}

type statisticsHandler struct {
	StatisticsHandler
}

func (h *statisticsHandler) OrderTotal(ctx context.Context, in *StatsRequest, out *OrderStatsResponse) error {
	return h.StatisticsHandler.OrderTotal(ctx, in, out)
}

func (h *statisticsHandler) TodayTotal(ctx context.Context, in *StatsRequest, out *OrderDayStatsResponse) error {
	return h.StatisticsHandler.TodayTotal(ctx, in, out)
}

func (h *statisticsHandler) OrderDays(ctx context.Context, in *StatsRequest, out *OrderDayStatsResponse) error {
	return h.StatisticsHandler.OrderDays(ctx, in, out)
}

func (h *statisticsHandler) Unhandled(ctx context.Context, in *StatsRequest, out *OrderStatsResponse) error {
	return h.StatisticsHandler.Unhandled(ctx, in, out)
}

func (h *statisticsHandler) CustomerGoods(ctx context.Context, in *StatsRequest, out *OrderStatsResponse) error {
	return h.StatisticsHandler.CustomerGoods(ctx, in, out)
}

func (h *statisticsHandler) CustomerOrder(ctx context.Context, in *StatsRequest, out *OrderStatsResponse) error {
	return h.StatisticsHandler.CustomerOrder(ctx, in, out)
}
