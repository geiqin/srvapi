// Code generated by protoc-gen-go. DO NOT EDIT.
// source: brand.proto

package geiqin_srv_pdm

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Brand struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Website              string   `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`
	LogoId               int64    `protobuf:"varint,4,opt,name=logo_id,json=logoId,proto3" json:"logo_id,omitempty"`
	LogoUrl              string   `protobuf:"bytes,5,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	BrandType            string   `protobuf:"bytes,6,opt,name=brand_type,json=brandType,proto3" json:"brand_type,omitempty"`
	ItemNum              int32    `protobuf:"varint,7,opt,name=item_num,json=itemNum,proto3" json:"item_num,omitempty"`
	Description          string   `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	CreatedAt            string   `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            string   `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Brand) Reset()         { *m = Brand{} }
func (m *Brand) String() string { return proto.CompactTextString(m) }
func (*Brand) ProtoMessage()    {}
func (*Brand) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b213c818d79a472, []int{0}
}

func (m *Brand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Brand.Unmarshal(m, b)
}
func (m *Brand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Brand.Marshal(b, m, deterministic)
}
func (m *Brand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Brand.Merge(m, src)
}
func (m *Brand) XXX_Size() int {
	return xxx_messageInfo_Brand.Size(m)
}
func (m *Brand) XXX_DiscardUnknown() {
	xxx_messageInfo_Brand.DiscardUnknown(m)
}

var xxx_messageInfo_Brand proto.InternalMessageInfo

func (m *Brand) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Brand) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Brand) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *Brand) GetLogoId() int64 {
	if m != nil {
		return m.LogoId
	}
	return 0
}

func (m *Brand) GetLogoUrl() string {
	if m != nil {
		return m.LogoUrl
	}
	return ""
}

func (m *Brand) GetBrandType() string {
	if m != nil {
		return m.BrandType
	}
	return ""
}

func (m *Brand) GetItemNum() int32 {
	if m != nil {
		return m.ItemNum
	}
	return 0
}

func (m *Brand) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Brand) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Brand) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type BrandResponse struct {
	Entity               *Brand   `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Pager                *Pager   `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager,omitempty"`
	Items                []*Brand `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	Error                *Error   `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Info                 *Info    `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrandResponse) Reset()         { *m = BrandResponse{} }
func (m *BrandResponse) String() string { return proto.CompactTextString(m) }
func (*BrandResponse) ProtoMessage()    {}
func (*BrandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b213c818d79a472, []int{1}
}

func (m *BrandResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrandResponse.Unmarshal(m, b)
}
func (m *BrandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrandResponse.Marshal(b, m, deterministic)
}
func (m *BrandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrandResponse.Merge(m, src)
}
func (m *BrandResponse) XXX_Size() int {
	return xxx_messageInfo_BrandResponse.Size(m)
}
func (m *BrandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BrandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BrandResponse proto.InternalMessageInfo

func (m *BrandResponse) GetEntity() *Brand {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *BrandResponse) GetPager() *Pager {
	if m != nil {
		return m.Pager
	}
	return nil
}

func (m *BrandResponse) GetItems() []*Brand {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *BrandResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *BrandResponse) GetInfo() *Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterType((*Brand)(nil), "geiqin.srv.pdm.Brand")
	proto.RegisterType((*BrandResponse)(nil), "geiqin.srv.pdm.BrandResponse")
}

func init() { proto.RegisterFile("brand.proto", fileDescriptor_0b213c818d79a472) }

var fileDescriptor_0b213c818d79a472 = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xdf, 0x6a, 0xd4, 0x40,
	0x14, 0xc6, 0x4d, 0xb2, 0x9b, 0xed, 0x9e, 0xad, 0xbd, 0x18, 0x14, 0xa7, 0x85, 0x42, 0xd8, 0xab,
	0x05, 0x31, 0x17, 0xeb, 0xb5, 0x60, 0xb5, 0x22, 0x7b, 0x23, 0x92, 0x5a, 0xbc, 0x0c, 0xd9, 0xcc,
	0xe9, 0x76, 0x20, 0x99, 0x19, 0x27, 0x93, 0xca, 0x3e, 0x87, 0x4f, 0xe7, 0x53, 0xf8, 0x0a, 0x32,
	0x67, 0x52, 0xf0, 0x4f, 0x64, 0xc1, 0xde, 0xe5, 0x7c, 0xdf, 0xef, 0x7c, 0x39, 0xf9, 0x20, 0xb0,
	0xd8, 0xda, 0x4a, 0x89, 0xdc, 0x58, 0xed, 0x34, 0x3b, 0xd9, 0xa1, 0xfc, 0x22, 0x55, 0xde, 0xd9,
	0xbb, 0xdc, 0x88, 0xf6, 0xec, 0xb8, 0xd6, 0x6d, 0xab, 0x55, 0x70, 0x97, 0xdf, 0x62, 0x98, 0xbe,
	0xf1, 0x34, 0x3b, 0x81, 0x58, 0x0a, 0x1e, 0x65, 0xd1, 0x6a, 0x5a, 0xc4, 0x52, 0x30, 0x06, 0x13,
	0x55, 0xb5, 0xc8, 0xe3, 0x2c, 0x5a, 0xcd, 0x0b, 0x7a, 0x66, 0x1c, 0x66, 0x5f, 0x71, 0xdb, 0x49,
	0x87, 0x3c, 0x21, 0xf9, 0x7e, 0x64, 0xcf, 0x60, 0xd6, 0xe8, 0x9d, 0x2e, 0xa5, 0xe0, 0x93, 0x2c,
	0x5a, 0x25, 0x45, 0xea, 0xc7, 0x8d, 0x60, 0xa7, 0x70, 0x44, 0x46, 0x6f, 0x1b, 0x3e, 0x0d, 0x3b,
	0x7e, 0xbe, 0xb6, 0x0d, 0x3b, 0x07, 0xa0, 0x43, 0x4b, 0xb7, 0x37, 0xc8, 0x53, 0x32, 0xe7, 0xa4,
	0x7c, 0xda, 0x1b, 0xf4, 0x9b, 0xd2, 0x61, 0x5b, 0xaa, 0xbe, 0xe5, 0x33, 0x3a, 0x6b, 0xe6, 0xe7,
	0x0f, 0x7d, 0xcb, 0x32, 0x58, 0x08, 0xec, 0x6a, 0x2b, 0x8d, 0x93, 0x5a, 0xf1, 0x23, 0x5a, 0xfd,
	0x55, 0xf2, 0xd9, 0xb5, 0xc5, 0xca, 0xa1, 0x28, 0x2b, 0xc7, 0xe7, 0x21, 0x7b, 0x50, 0x2e, 0x9c,
	0xb7, 0x7b, 0x23, 0xee, 0x6d, 0x08, 0xf6, 0xa0, 0x5c, 0xb8, 0xe5, 0x8f, 0x08, 0x1e, 0x53, 0x2b,
	0x05, 0x76, 0x46, 0xab, 0x0e, 0xd9, 0x0b, 0x48, 0x51, 0x39, 0xe9, 0xf6, 0xd4, 0xd0, 0x62, 0xfd,
	0x34, 0xff, 0xbd, 0xd6, 0x3c, 0xe0, 0x03, 0xc4, 0x9e, 0xc3, 0xd4, 0x54, 0x3b, 0xb4, 0xd4, 0xde,
	0x08, 0xfd, 0xd1, 0x9b, 0x45, 0x60, 0x3c, 0xec, 0x3f, 0xac, 0xe3, 0x49, 0x96, 0xfc, 0x3b, 0x3a,
	0x30, 0x1e, 0x46, 0x6b, 0xb5, 0xa5, 0x9a, 0x47, 0xe0, 0x77, 0xde, 0x2c, 0x02, 0xc3, 0x56, 0x30,
	0x91, 0xea, 0x46, 0x53, 0xf1, 0x8b, 0xf5, 0x93, 0x3f, 0xd9, 0x8d, 0xba, 0xd1, 0x05, 0x11, 0xeb,
	0xef, 0x31, 0x1c, 0xd3, 0x7b, 0xae, 0xd0, 0xde, 0xc9, 0x1a, 0xd9, 0x6b, 0x48, 0xdf, 0x52, 0x5d,
	0x6c, 0xfc, 0x9e, 0xb3, 0xf3, 0xf1, 0x33, 0x87, 0xc2, 0x96, 0x8f, 0x7c, 0xc2, 0x35, 0x35, 0xfa,
	0x90, 0x84, 0x4b, 0x6c, 0x70, 0x2c, 0x61, 0x23, 0x36, 0xca, 0x1d, 0x4e, 0x78, 0x05, 0xc9, 0x7b,
	0x74, 0xff, 0xbd, 0x7e, 0x09, 0xe9, 0x15, 0x56, 0xb6, 0xbe, 0x65, 0xa7, 0x7f, 0xa1, 0x55, 0x87,
	0x9f, 0x6f, 0xd1, 0xe2, 0xc1, 0x94, 0x6d, 0x4a, 0xbf, 0xda, 0xcb, 0x9f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x0a, 0xa4, 0xd8, 0xcf, 0x97, 0x03, 0x00, 0x00,
}
