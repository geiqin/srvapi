// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: itemDisplay.proto

package geiqin_srv_pdm

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MyItemService service

type MyItemService interface {
	// 查询商品
	Search(ctx context.Context, in *ItemWhere, opts ...client.CallOption) (*ItemDisplayResponse, error)
	// 获取商品信息
	Get(ctx context.Context, in *ItemWhere, opts ...client.CallOption) (*ItemDisplayResponse, error)
}

type myItemService struct {
	c    client.Client
	name string
}

func NewMyItemService(name string, c client.Client) MyItemService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "geiqin.srv.pdm"
	}
	return &myItemService{
		c:    c,
		name: name,
	}
}

func (c *myItemService) Search(ctx context.Context, in *ItemWhere, opts ...client.CallOption) (*ItemDisplayResponse, error) {
	req := c.c.NewRequest(c.name, "MyItemService.Search", in)
	out := new(ItemDisplayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myItemService) Get(ctx context.Context, in *ItemWhere, opts ...client.CallOption) (*ItemDisplayResponse, error) {
	req := c.c.NewRequest(c.name, "MyItemService.Get", in)
	out := new(ItemDisplayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyItemService service

type MyItemServiceHandler interface {
	// 查询商品
	Search(context.Context, *ItemWhere, *ItemDisplayResponse) error
	// 获取商品信息
	Get(context.Context, *ItemWhere, *ItemDisplayResponse) error
}

func RegisterMyItemServiceHandler(s server.Server, hdlr MyItemServiceHandler, opts ...server.HandlerOption) error {
	type myItemService interface {
		Search(ctx context.Context, in *ItemWhere, out *ItemDisplayResponse) error
		Get(ctx context.Context, in *ItemWhere, out *ItemDisplayResponse) error
	}
	type MyItemService struct {
		myItemService
	}
	h := &myItemServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MyItemService{h}, opts...))
}

type myItemServiceHandler struct {
	MyItemServiceHandler
}

func (h *myItemServiceHandler) Search(ctx context.Context, in *ItemWhere, out *ItemDisplayResponse) error {
	return h.MyItemServiceHandler.Search(ctx, in, out)
}

func (h *myItemServiceHandler) Get(ctx context.Context, in *ItemWhere, out *ItemDisplayResponse) error {
	return h.MyItemServiceHandler.Get(ctx, in, out)
}
