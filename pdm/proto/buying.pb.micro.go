// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: buying.proto

package geiqin_srv_pdm

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BuyingService service

type BuyingService interface {
	// 检查商品是否可购买
	IsBuy(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error)
	//计算优惠
	Calculate(ctx context.Context, in *Buying, opts ...client.CallOption) (*BuyingResponse, error)
}

type buyingService struct {
	c    client.Client
	name string
}

func NewBuyingService(name string, c client.Client) BuyingService {
	return &buyingService{
		c:    c,
		name: name,
	}
}

func (c *buyingService) IsBuy(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "BuyingService.IsBuy", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyingService) Calculate(ctx context.Context, in *Buying, opts ...client.CallOption) (*BuyingResponse, error) {
	req := c.c.NewRequest(c.name, "BuyingService.Calculate", in)
	out := new(BuyingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BuyingService service

type BuyingServiceHandler interface {
	// 检查商品是否可购买
	IsBuy(context.Context, *Item, *ItemResponse) error
	//计算优惠
	Calculate(context.Context, *Buying, *BuyingResponse) error
}

func RegisterBuyingServiceHandler(s server.Server, hdlr BuyingServiceHandler, opts ...server.HandlerOption) error {
	type buyingService interface {
		IsBuy(ctx context.Context, in *Item, out *ItemResponse) error
		Calculate(ctx context.Context, in *Buying, out *BuyingResponse) error
	}
	type BuyingService struct {
		buyingService
	}
	h := &buyingServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BuyingService{h}, opts...))
}

type buyingServiceHandler struct {
	BuyingServiceHandler
}

func (h *buyingServiceHandler) IsBuy(ctx context.Context, in *Item, out *ItemResponse) error {
	return h.BuyingServiceHandler.IsBuy(ctx, in, out)
}

func (h *buyingServiceHandler) Calculate(ctx context.Context, in *Buying, out *BuyingResponse) error {
	return h.BuyingServiceHandler.Calculate(ctx, in, out)
}
