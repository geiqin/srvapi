// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: favorite.proto

//import "proto/item.proto";

package geiqin_srv_pdm

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for FavoriteService service

type FavoriteService interface {
	Create(ctx context.Context, in *Favorite, opts ...client.CallOption) (*FavoriteResponse, error)
	Delete(ctx context.Context, in *Id, opts ...client.CallOption) (*FavoriteResponse, error)
	Get(ctx context.Context, in *Id, opts ...client.CallOption) (*FavoriteResponse, error)
	Check(ctx context.Context, in *Id, opts ...client.CallOption) (*FavoriteResponse, error)
	Search(ctx context.Context, in *BaseWhere, opts ...client.CallOption) (*FavoriteResponse, error)
}

type favoriteService struct {
	c    client.Client
	name string
}

func NewFavoriteService(name string, c client.Client) FavoriteService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "geiqin.srv.pdm"
	}
	return &favoriteService{
		c:    c,
		name: name,
	}
}

func (c *favoriteService) Create(ctx context.Context, in *Favorite, opts ...client.CallOption) (*FavoriteResponse, error) {
	req := c.c.NewRequest(c.name, "FavoriteService.Create", in)
	out := new(FavoriteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteService) Delete(ctx context.Context, in *Id, opts ...client.CallOption) (*FavoriteResponse, error) {
	req := c.c.NewRequest(c.name, "FavoriteService.Delete", in)
	out := new(FavoriteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteService) Get(ctx context.Context, in *Id, opts ...client.CallOption) (*FavoriteResponse, error) {
	req := c.c.NewRequest(c.name, "FavoriteService.Get", in)
	out := new(FavoriteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteService) Check(ctx context.Context, in *Id, opts ...client.CallOption) (*FavoriteResponse, error) {
	req := c.c.NewRequest(c.name, "FavoriteService.Check", in)
	out := new(FavoriteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteService) Search(ctx context.Context, in *BaseWhere, opts ...client.CallOption) (*FavoriteResponse, error) {
	req := c.c.NewRequest(c.name, "FavoriteService.Search", in)
	out := new(FavoriteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FavoriteService service

type FavoriteServiceHandler interface {
	Create(context.Context, *Favorite, *FavoriteResponse) error
	Delete(context.Context, *Id, *FavoriteResponse) error
	Get(context.Context, *Id, *FavoriteResponse) error
	Check(context.Context, *Id, *FavoriteResponse) error
	Search(context.Context, *BaseWhere, *FavoriteResponse) error
}

func RegisterFavoriteServiceHandler(s server.Server, hdlr FavoriteServiceHandler, opts ...server.HandlerOption) error {
	type favoriteService interface {
		Create(ctx context.Context, in *Favorite, out *FavoriteResponse) error
		Delete(ctx context.Context, in *Id, out *FavoriteResponse) error
		Get(ctx context.Context, in *Id, out *FavoriteResponse) error
		Check(ctx context.Context, in *Id, out *FavoriteResponse) error
		Search(ctx context.Context, in *BaseWhere, out *FavoriteResponse) error
	}
	type FavoriteService struct {
		favoriteService
	}
	h := &favoriteServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FavoriteService{h}, opts...))
}

type favoriteServiceHandler struct {
	FavoriteServiceHandler
}

func (h *favoriteServiceHandler) Create(ctx context.Context, in *Favorite, out *FavoriteResponse) error {
	return h.FavoriteServiceHandler.Create(ctx, in, out)
}

func (h *favoriteServiceHandler) Delete(ctx context.Context, in *Id, out *FavoriteResponse) error {
	return h.FavoriteServiceHandler.Delete(ctx, in, out)
}

func (h *favoriteServiceHandler) Get(ctx context.Context, in *Id, out *FavoriteResponse) error {
	return h.FavoriteServiceHandler.Get(ctx, in, out)
}

func (h *favoriteServiceHandler) Check(ctx context.Context, in *Id, out *FavoriteResponse) error {
	return h.FavoriteServiceHandler.Check(ctx, in, out)
}

func (h *favoriteServiceHandler) Search(ctx context.Context, in *BaseWhere, out *FavoriteResponse) error {
	return h.FavoriteServiceHandler.Search(ctx, in, out)
}
