// Code generated by protoc-gen-go. DO NOT EDIT.
// source: item.proto

package geiqin_srv_pdm

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Item struct {
	Id                   int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name                 string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Unit                 string           `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit"`
	ItemSn               string           `protobuf:"bytes,4,opt,name=item_sn,json=itemSn,proto3" json:"item_sn"`
	BrandId              int32            `protobuf:"varint,5,opt,name=brand_id,json=brandId,proto3" json:"brand_id"`
	TaxonomyId           int64            `protobuf:"varint,6,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id"`
	BuyQuota             int32            `protobuf:"varint,7,opt,name=buy_quota,json=buyQuota,proto3" json:"buy_quota"`
	Quantity             int32            `protobuf:"varint,8,opt,name=quantity,proto3" json:"quantity"`
	SoldNum              int32            `protobuf:"varint,9,opt,name=sold_num,json=soldNum,proto3" json:"sold_num"`
	InitSoldNum          int32            `protobuf:"varint,10,opt,name=init_sold_num,json=initSoldNum,proto3" json:"init_sold_num"`
	FrozenNum            int32            `protobuf:"varint,11,opt,name=frozen_num,json=frozenNum,proto3" json:"frozen_num"`
	ModelType            string           `protobuf:"bytes,12,opt,name=model_type,json=modelType,proto3" json:"model_type"`
	Listed               bool             `protobuf:"varint,13,opt,name=listed,proto3" json:"listed"`
	Locked               bool             `protobuf:"varint,14,opt,name=locked,proto3" json:"locked"`
	HideStock            bool             `protobuf:"varint,15,opt,name=hide_stock,json=hideStock,proto3" json:"hide_stock"`
	JoinLevelDiscount    bool             `protobuf:"varint,16,opt,name=join_level_discount,json=joinLevelDiscount,proto3" json:"join_level_discount"`
	PurchaseRight        bool             `protobuf:"varint,17,opt,name=purchase_right,json=purchaseRight,proto3" json:"purchase_right"`
	AutoListingTime      string           `protobuf:"bytes,18,opt,name=auto_listing_time,json=autoListingTime,proto3" json:"auto_listing_time"`
	PostType             string           `protobuf:"bytes,19,opt,name=post_type,json=postType,proto3" json:"post_type"`
	PostFee              float32          `protobuf:"fixed32,20,opt,name=post_fee,json=postFee,proto3" json:"post_fee"`
	OutItemNo            string           `protobuf:"bytes,21,opt,name=out_item_no,json=outItemNo,proto3" json:"out_item_no"`
	Content              string           `protobuf:"bytes,22,opt,name=content,proto3" json:"content"`
	Summary              string           `protobuf:"bytes,23,opt,name=summary,proto3" json:"summary"`
	SellingPoint         string           `protobuf:"bytes,24,opt,name=selling_point,json=sellingPoint,proto3" json:"selling_point"`
	MinBuy               int32            `protobuf:"varint,25,opt,name=min_buy,json=minBuy,proto3" json:"min_buy"`
	NostoreSell          bool             `protobuf:"varint,26,opt,name=nostore_sell,json=nostoreSell,proto3" json:"nostore_sell"`
	ThumbId              int64            `protobuf:"varint,27,opt,name=thumb_id,json=thumbId,proto3" json:"thumb_id"`
	ThumbUrl             string           `protobuf:"bytes,28,opt,name=thumb_url,json=thumbUrl,proto3" json:"thumb_url"`
	TemplateId           int32            `protobuf:"varint,29,opt,name=template_id,json=templateId,proto3" json:"template_id"`
	Barcode              string           `protobuf:"bytes,30,opt,name=barcode,proto3" json:"barcode"`
	Price                float32          `protobuf:"fixed32,31,opt,name=price,proto3" json:"price"`
	OriginPrice          float32          `protobuf:"fixed32,32,opt,name=origin_price,json=originPrice,proto3" json:"origin_price"`
	CostPrice            float32          `protobuf:"fixed32,33,opt,name=cost_price,json=costPrice,proto3" json:"cost_price"`
	MinPrice             float32          `protobuf:"fixed32,34,opt,name=min_price,json=minPrice,proto3" json:"min_price"`
	MaxPrice             float32          `protobuf:"fixed32,35,opt,name=max_price,json=maxPrice,proto3" json:"max_price"`
	Weight               float32          `protobuf:"fixed32,36,opt,name=weight,proto3" json:"weight"`
	SpecData             string           `protobuf:"bytes,37,opt,name=spec_data,json=specData,proto3" json:"spec_data"`
	ReviewNum            int32            `protobuf:"varint,38,opt,name=review_num,json=reviewNum,proto3" json:"review_num"`
	ViewCount            int32            `protobuf:"varint,39,opt,name=view_count,json=viewCount,proto3" json:"view_count"`
	ViewWCount           int32            `protobuf:"varint,40,opt,name=view_w_count,json=viewWCount,proto3" json:"view_w_count"`
	BuyCount             int32            `protobuf:"varint,41,opt,name=buy_count,json=buyCount,proto3" json:"buy_count"`
	BuyWCount            int32            `protobuf:"varint,42,opt,name=buy_w_count,json=buyWCount,proto3" json:"buy_w_count"`
	Sorting              int32            `protobuf:"varint,43,opt,name=sorting,proto3" json:"sorting"`
	CreatedAt            string           `protobuf:"bytes,44,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            string           `protobuf:"bytes,45,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Brand                *Brand           `protobuf:"bytes,46,opt,name=brand,proto3" json:"brand,omitempty"`
	Cats                 []*Cat           `protobuf:"bytes,47,rep,name=cats,proto3" json:"cats,omitempty" gorm:"many2many:item_cats;"`
	Tags                 []*Tag           `protobuf:"bytes,48,rep,name=tags,proto3" json:"tags,omitempty" gorm:"many2many:item_tags;"`
	Skus                 []*Sku           `protobuf:"bytes,49,rep,name=skus,proto3" json:"skus,omitempty"`
	Galleries            []*ItemGallery   `protobuf:"bytes,50,rep,name=galleries,proto3" json:"galleries,omitempty"`
	Prices               []*ItemPrice     `protobuf:"bytes,51,rep,name=prices,proto3" json:"prices,omitempty"`
	Rights               []*ItemRight     `protobuf:"bytes,52,rep,name=rights,proto3" json:"rights,omitempty"`
	SpecIndexes          []*SpecItemIndex `protobuf:"bytes,53,rep,name=spec_indexes,json=specIndexes,proto3" json:"spec_indexes,omitempty"`
	Ids                  []int64          `protobuf:"varint,54,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Specs                []*Spec          `protobuf:"bytes,55,rep,name=specs,proto3" json:"specs,omitempty" gorm:"many2many:spec_item_indices;"`
	Skuitem              *Sku             `protobuf:"bytes,56,opt,name=skuitem,proto3" json:"skuitem,omitempty"`
	SkuId                int64            `protobuf:"varint,57,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_6007f868cf6553df, []int{0}
}

func (m *Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Item.Unmarshal(m, b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Item.Marshal(b, m, deterministic)
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return xxx_messageInfo_Item.Size(m)
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Item) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Item) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *Item) GetItemSn() string {
	if m != nil {
		return m.ItemSn
	}
	return ""
}

func (m *Item) GetBrandId() int32 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

func (m *Item) GetTaxonomyId() int64 {
	if m != nil {
		return m.TaxonomyId
	}
	return 0
}

func (m *Item) GetBuyQuota() int32 {
	if m != nil {
		return m.BuyQuota
	}
	return 0
}

func (m *Item) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Item) GetSoldNum() int32 {
	if m != nil {
		return m.SoldNum
	}
	return 0
}

func (m *Item) GetInitSoldNum() int32 {
	if m != nil {
		return m.InitSoldNum
	}
	return 0
}

func (m *Item) GetFrozenNum() int32 {
	if m != nil {
		return m.FrozenNum
	}
	return 0
}

func (m *Item) GetModelType() string {
	if m != nil {
		return m.ModelType
	}
	return ""
}

func (m *Item) GetListed() bool {
	if m != nil {
		return m.Listed
	}
	return false
}

func (m *Item) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

func (m *Item) GetHideStock() bool {
	if m != nil {
		return m.HideStock
	}
	return false
}

func (m *Item) GetJoinLevelDiscount() bool {
	if m != nil {
		return m.JoinLevelDiscount
	}
	return false
}

func (m *Item) GetPurchaseRight() bool {
	if m != nil {
		return m.PurchaseRight
	}
	return false
}

func (m *Item) GetAutoListingTime() string {
	if m != nil {
		return m.AutoListingTime
	}
	return ""
}

func (m *Item) GetPostType() string {
	if m != nil {
		return m.PostType
	}
	return ""
}

func (m *Item) GetPostFee() float32 {
	if m != nil {
		return m.PostFee
	}
	return 0
}

func (m *Item) GetOutItemNo() string {
	if m != nil {
		return m.OutItemNo
	}
	return ""
}

func (m *Item) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Item) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *Item) GetSellingPoint() string {
	if m != nil {
		return m.SellingPoint
	}
	return ""
}

func (m *Item) GetMinBuy() int32 {
	if m != nil {
		return m.MinBuy
	}
	return 0
}

func (m *Item) GetNostoreSell() bool {
	if m != nil {
		return m.NostoreSell
	}
	return false
}

func (m *Item) GetThumbId() int64 {
	if m != nil {
		return m.ThumbId
	}
	return 0
}

func (m *Item) GetThumbUrl() string {
	if m != nil {
		return m.ThumbUrl
	}
	return ""
}

func (m *Item) GetTemplateId() int32 {
	if m != nil {
		return m.TemplateId
	}
	return 0
}

func (m *Item) GetBarcode() string {
	if m != nil {
		return m.Barcode
	}
	return ""
}

func (m *Item) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Item) GetOriginPrice() float32 {
	if m != nil {
		return m.OriginPrice
	}
	return 0
}

func (m *Item) GetCostPrice() float32 {
	if m != nil {
		return m.CostPrice
	}
	return 0
}

func (m *Item) GetMinPrice() float32 {
	if m != nil {
		return m.MinPrice
	}
	return 0
}

func (m *Item) GetMaxPrice() float32 {
	if m != nil {
		return m.MaxPrice
	}
	return 0
}

func (m *Item) GetWeight() float32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *Item) GetSpecData() string {
	if m != nil {
		return m.SpecData
	}
	return ""
}

func (m *Item) GetReviewNum() int32 {
	if m != nil {
		return m.ReviewNum
	}
	return 0
}

func (m *Item) GetViewCount() int32 {
	if m != nil {
		return m.ViewCount
	}
	return 0
}

func (m *Item) GetViewWCount() int32 {
	if m != nil {
		return m.ViewWCount
	}
	return 0
}

func (m *Item) GetBuyCount() int32 {
	if m != nil {
		return m.BuyCount
	}
	return 0
}

func (m *Item) GetBuyWCount() int32 {
	if m != nil {
		return m.BuyWCount
	}
	return 0
}

func (m *Item) GetSorting() int32 {
	if m != nil {
		return m.Sorting
	}
	return 0
}

func (m *Item) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Item) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Item) GetBrand() *Brand {
	if m != nil {
		return m.Brand
	}
	return nil
}

func (m *Item) GetCats() []*Cat {
	if m != nil {
		return m.Cats
	}
	return nil
}

func (m *Item) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Item) GetSkus() []*Sku {
	if m != nil {
		return m.Skus
	}
	return nil
}

func (m *Item) GetGalleries() []*ItemGallery {
	if m != nil {
		return m.Galleries
	}
	return nil
}

func (m *Item) GetPrices() []*ItemPrice {
	if m != nil {
		return m.Prices
	}
	return nil
}

func (m *Item) GetRights() []*ItemRight {
	if m != nil {
		return m.Rights
	}
	return nil
}

func (m *Item) GetSpecIndexes() []*SpecItemIndex {
	if m != nil {
		return m.SpecIndexes
	}
	return nil
}

func (m *Item) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *Item) GetSpecs() []*Spec {
	if m != nil {
		return m.Specs
	}
	return nil
}

func (m *Item) GetSkuitem() *Sku {
	if m != nil {
		return m.Skuitem
	}
	return nil
}

func (m *Item) GetSkuId() int64 {
	if m != nil {
		return m.SkuId
	}
	return 0
}

type GoodsWhere struct {
	ItemIds              []int64  `protobuf:"varint,1,rep,packed,name=item_ids,json=itemIds,proto3" json:"item_ids,omitempty"`
	SkuIds               []int64  `protobuf:"varint,2,rep,packed,name=sku_ids,json=skuIds,proto3" json:"sku_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoodsWhere) Reset()         { *m = GoodsWhere{} }
func (m *GoodsWhere) String() string { return proto.CompactTextString(m) }
func (*GoodsWhere) ProtoMessage()    {}
func (*GoodsWhere) Descriptor() ([]byte, []int) {
	return fileDescriptor_6007f868cf6553df, []int{1}
}

func (m *GoodsWhere) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GoodsWhere.Unmarshal(m, b)
}
func (m *GoodsWhere) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GoodsWhere.Marshal(b, m, deterministic)
}
func (m *GoodsWhere) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsWhere.Merge(m, src)
}
func (m *GoodsWhere) XXX_Size() int {
	return xxx_messageInfo_GoodsWhere.Size(m)
}
func (m *GoodsWhere) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsWhere.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsWhere proto.InternalMessageInfo

func (m *GoodsWhere) GetItemIds() []int64 {
	if m != nil {
		return m.ItemIds
	}
	return nil
}

func (m *GoodsWhere) GetSkuIds() []int64 {
	if m != nil {
		return m.SkuIds
	}
	return nil
}

type ItemWhere struct {
	Paged                int32    `protobuf:"varint,1,opt,name=paged,proto3" json:"paged,omitempty"`
	PageSize             int32    `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Sorting              string   `protobuf:"bytes,3,opt,name=sorting,proto3" json:"sorting,omitempty"`
	Keywords             string   `protobuf:"bytes,4,opt,name=keywords,proto3" json:"keywords,omitempty"`
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	ItemSn               string   `protobuf:"bytes,6,opt,name=item_sn,json=itemSn,proto3" json:"item_sn,omitempty"`
	BrandId              int32    `protobuf:"varint,7,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	TagId                int32    `protobuf:"varint,8,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	CatId                int32    `protobuf:"varint,9,opt,name=cat_id,json=catId,proto3" json:"cat_id,omitempty"`
	TaxonomyId           int64    `protobuf:"varint,10,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id,omitempty"`
	MinPrice             float32  `protobuf:"fixed32,11,opt,name=min_price,json=minPrice,proto3" json:"min_price,omitempty"`
	MaxPrice             float32  `protobuf:"fixed32,12,opt,name=max_price,json=maxPrice,proto3" json:"max_price,omitempty"`
	ModelType            string   `protobuf:"bytes,13,opt,name=model_type,json=modelType,proto3" json:"model_type,omitempty"`
	Status               string   `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	CouponId             int64    `protobuf:"varint,15,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id,omitempty"`
	Valid                bool     `protobuf:"varint,16,opt,name=valid,proto3" json:"valid,omitempty"`
	Invite               string   `protobuf:"bytes,17,opt,name=invite,proto3" json:"invite,omitempty"`
	Id                   int64    `protobuf:"varint,18,opt,name=id,proto3" json:"id,omitempty"`
	Ids                  []int64  `protobuf:"varint,19,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	SkuId                int64    `protobuf:"varint,20,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ItemWhere) Reset()         { *m = ItemWhere{} }
func (m *ItemWhere) String() string { return proto.CompactTextString(m) }
func (*ItemWhere) ProtoMessage()    {}
func (*ItemWhere) Descriptor() ([]byte, []int) {
	return fileDescriptor_6007f868cf6553df, []int{2}
}

func (m *ItemWhere) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ItemWhere.Unmarshal(m, b)
}
func (m *ItemWhere) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ItemWhere.Marshal(b, m, deterministic)
}
func (m *ItemWhere) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemWhere.Merge(m, src)
}
func (m *ItemWhere) XXX_Size() int {
	return xxx_messageInfo_ItemWhere.Size(m)
}
func (m *ItemWhere) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemWhere.DiscardUnknown(m)
}

var xxx_messageInfo_ItemWhere proto.InternalMessageInfo

func (m *ItemWhere) GetPaged() int32 {
	if m != nil {
		return m.Paged
	}
	return 0
}

func (m *ItemWhere) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ItemWhere) GetSorting() string {
	if m != nil {
		return m.Sorting
	}
	return ""
}

func (m *ItemWhere) GetKeywords() string {
	if m != nil {
		return m.Keywords
	}
	return ""
}

func (m *ItemWhere) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ItemWhere) GetItemSn() string {
	if m != nil {
		return m.ItemSn
	}
	return ""
}

func (m *ItemWhere) GetBrandId() int32 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

func (m *ItemWhere) GetTagId() int32 {
	if m != nil {
		return m.TagId
	}
	return 0
}

func (m *ItemWhere) GetCatId() int32 {
	if m != nil {
		return m.CatId
	}
	return 0
}

func (m *ItemWhere) GetTaxonomyId() int64 {
	if m != nil {
		return m.TaxonomyId
	}
	return 0
}

func (m *ItemWhere) GetMinPrice() float32 {
	if m != nil {
		return m.MinPrice
	}
	return 0
}

func (m *ItemWhere) GetMaxPrice() float32 {
	if m != nil {
		return m.MaxPrice
	}
	return 0
}

func (m *ItemWhere) GetModelType() string {
	if m != nil {
		return m.ModelType
	}
	return ""
}

func (m *ItemWhere) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ItemWhere) GetCouponId() int64 {
	if m != nil {
		return m.CouponId
	}
	return 0
}

func (m *ItemWhere) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *ItemWhere) GetInvite() string {
	if m != nil {
		return m.Invite
	}
	return ""
}

func (m *ItemWhere) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ItemWhere) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ItemWhere) GetSkuId() int64 {
	if m != nil {
		return m.SkuId
	}
	return 0
}

type ItemResponse struct {
	Entity               *Item    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Pager                *Pager   `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager,omitempty"`
	Items                []*Item  `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	Error                *Error   `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Info                 *Info    `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ItemResponse) Reset()         { *m = ItemResponse{} }
func (m *ItemResponse) String() string { return proto.CompactTextString(m) }
func (*ItemResponse) ProtoMessage()    {}
func (*ItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6007f868cf6553df, []int{3}
}

func (m *ItemResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ItemResponse.Unmarshal(m, b)
}
func (m *ItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ItemResponse.Marshal(b, m, deterministic)
}
func (m *ItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemResponse.Merge(m, src)
}
func (m *ItemResponse) XXX_Size() int {
	return xxx_messageInfo_ItemResponse.Size(m)
}
func (m *ItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ItemResponse proto.InternalMessageInfo

func (m *ItemResponse) GetEntity() *Item {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *ItemResponse) GetPager() *Pager {
	if m != nil {
		return m.Pager
	}
	return nil
}

func (m *ItemResponse) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ItemResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ItemResponse) GetInfo() *Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterType((*Item)(nil), "geiqin.srv.pdm.Item")
	proto.RegisterType((*GoodsWhere)(nil), "geiqin.srv.pdm.GoodsWhere")
	proto.RegisterType((*ItemWhere)(nil), "geiqin.srv.pdm.ItemWhere")
	proto.RegisterType((*ItemResponse)(nil), "geiqin.srv.pdm.ItemResponse")
}

func init() { proto.RegisterFile("item.proto", fileDescriptor_6007f868cf6553df) }

var fileDescriptor_6007f868cf6553df = []byte{
	// 1487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0x6b, 0x73, 0x13, 0x37,
	0x17, 0x7e, 0x1d, 0xc7, 0x37, 0xd9, 0x49, 0x88, 0x92, 0x80, 0x92, 0x70, 0x31, 0xe1, 0xe5, 0xc5,
	0x2f, 0x97, 0xb4, 0x84, 0xde, 0x98, 0x76, 0x5a, 0x20, 0x69, 0x33, 0xee, 0x30, 0x0c, 0x5d, 0xc3,
	0xf0, 0x71, 0x47, 0xde, 0x55, 0x1c, 0xd5, 0xbb, 0xd2, 0xb2, 0xd2, 0x86, 0x98, 0x4f, 0xfd, 0x75,
	0xfd, 0x33, 0xed, 0x8f, 0xe8, 0x9c, 0x23, 0x39, 0x09, 0x61, 0xe9, 0x30, 0xce, 0xb7, 0x3d, 0xcf,
	0xf3, 0x9c, 0x63, 0x49, 0xfb, 0xe8, 0x9c, 0x35, 0x21, 0xd2, 0x8a, 0x74, 0x3b, 0xcb, 0xb5, 0xd5,
	0x74, 0x71, 0x24, 0xe4, 0x5b, 0xa9, 0xb6, 0x4d, 0x7e, 0xb4, 0x9d, 0xc5, 0xe9, 0x46, 0x27, 0xd2,
	0x69, 0xaa, 0x95, 0x63, 0x37, 0x96, 0x41, 0xb9, 0xcf, 0x93, 0x44, 0xe4, 0x13, 0x0f, 0x2d, 0x01,
	0xf4, 0x32, 0x97, 0x91, 0x38, 0x0b, 0x04, 0x72, 0x74, 0x68, 0x3d, 0xd0, 0xb2, 0x7c, 0xe4, 0x1f,
	0xdb, 0xc3, 0x9c, 0xab, 0x78, 0x8a, 0x9b, 0x71, 0x31, 0x7d, 0x8c, 0xf8, 0x54, 0x4d, 0x4c, 0x26,
	0x22, 0xf7, 0xbc, 0xf5, 0xe7, 0x22, 0x99, 0xef, 0x5b, 0x91, 0xd2, 0x45, 0x32, 0x27, 0x63, 0x56,
	0xe9, 0x56, 0x7a, 0xd5, 0x60, 0x4e, 0xc6, 0x94, 0x92, 0x79, 0xc5, 0x53, 0xc1, 0xe6, 0xba, 0x95,
	0x5e, 0x2b, 0xc0, 0x67, 0xc0, 0x0a, 0x25, 0x2d, 0xab, 0x3a, 0x0c, 0x9e, 0xe9, 0x15, 0xd2, 0x80,
	0xd5, 0x84, 0x46, 0xb1, 0x79, 0x84, 0xeb, 0x10, 0x0e, 0x14, 0x5d, 0x27, 0x4d, 0x5c, 0x4a, 0x28,
	0x63, 0x56, 0xeb, 0x56, 0x7a, 0xb5, 0xa0, 0x81, 0x71, 0x3f, 0xa6, 0x37, 0x48, 0xdb, 0xf2, 0x63,
	0xad, 0x74, 0x3a, 0x01, 0xb6, 0x8e, 0x3f, 0x4a, 0xa6, 0x50, 0x3f, 0xa6, 0x9b, 0xa4, 0x35, 0x2c,
	0x26, 0xe1, 0xdb, 0x42, 0x5b, 0xce, 0x1a, 0x98, 0xdc, 0x1c, 0x16, 0x93, 0xdf, 0x20, 0xa6, 0x1b,
	0xa4, 0xf9, 0xb6, 0xe0, 0xca, 0x4a, 0x3b, 0x61, 0x4d, 0xc7, 0x4d, 0x63, 0xf8, 0x51, 0xa3, 0x93,
	0x38, 0x54, 0x45, 0xca, 0x5a, 0xee, 0x47, 0x21, 0x7e, 0x51, 0xa4, 0x74, 0x8b, 0x2c, 0x48, 0x25,
	0x6d, 0x78, 0xc2, 0x13, 0xe4, 0xdb, 0x00, 0x0e, 0xbc, 0xe6, 0x1a, 0x21, 0x07, 0xb9, 0x7e, 0x2f,
	0x14, 0x0a, 0xda, 0x28, 0x68, 0x39, 0xc4, 0xd3, 0xa9, 0x8e, 0x45, 0x12, 0xda, 0x49, 0x26, 0x58,
	0x07, 0xb7, 0xdb, 0x42, 0xe4, 0xd5, 0x24, 0x13, 0xf4, 0x32, 0xa9, 0x27, 0xd2, 0x58, 0x11, 0xb3,
	0x85, 0x6e, 0xa5, 0xd7, 0x0c, 0x7c, 0x84, 0xb8, 0x8e, 0xc6, 0x22, 0x66, 0x8b, 0x1e, 0xc7, 0x08,
	0xca, 0x1d, 0xca, 0x58, 0x84, 0xc6, 0xea, 0x68, 0xcc, 0x96, 0x90, 0x6b, 0x01, 0x32, 0x00, 0x80,
	0x6e, 0x93, 0x95, 0xdf, 0xb5, 0x54, 0x61, 0x22, 0x8e, 0x44, 0x12, 0xc6, 0xd2, 0x44, 0xba, 0x50,
	0x96, 0x5d, 0x42, 0xdd, 0x32, 0x50, 0xcf, 0x81, 0xd9, 0xf3, 0x04, 0xbd, 0x4d, 0x16, 0xb3, 0x22,
	0x8f, 0x0e, 0xb9, 0x11, 0x61, 0x0e, 0xe6, 0x60, 0xcb, 0x28, 0x5d, 0x98, 0xa2, 0xe8, 0x18, 0x7a,
	0x97, 0x2c, 0xf3, 0xc2, 0xea, 0x10, 0x16, 0x27, 0xd5, 0x28, 0xb4, 0x32, 0x15, 0x8c, 0xe2, 0x5e,
	0x96, 0x80, 0x78, 0xee, 0xf0, 0x57, 0x32, 0x15, 0xf0, 0x1e, 0x32, 0x6d, 0xac, 0xdb, 0xef, 0x0a,
	0x6a, 0x9a, 0x00, 0xe0, 0x76, 0xd7, 0x09, 0x3e, 0x87, 0x07, 0x42, 0xb0, 0xd5, 0x6e, 0xa5, 0x37,
	0x17, 0x34, 0x20, 0xfe, 0x45, 0x08, 0x7a, 0x9d, 0xb4, 0x75, 0x61, 0x43, 0x34, 0x86, 0xd2, 0x6c,
	0xcd, 0x9d, 0x94, 0x2e, 0x2c, 0x58, 0xed, 0x85, 0xa6, 0x8c, 0x34, 0x22, 0xad, 0xac, 0x50, 0x96,
	0x5d, 0x46, 0x6e, 0x1a, 0x02, 0x63, 0x8a, 0x34, 0xe5, 0xf9, 0x84, 0x5d, 0x71, 0x8c, 0x0f, 0xe9,
	0x2d, 0xb2, 0x60, 0x44, 0x92, 0xc0, 0x92, 0x33, 0x2d, 0x95, 0x65, 0x0c, 0xf9, 0x8e, 0x07, 0x5f,
	0x02, 0x06, 0x6e, 0x4c, 0xa5, 0x0a, 0x87, 0xc5, 0x84, 0xad, 0xe3, 0xdb, 0xab, 0xa7, 0x52, 0x3d,
	0x2b, 0x26, 0xf4, 0x26, 0xe9, 0x28, 0x6d, 0xac, 0xce, 0x45, 0x08, 0x09, 0x6c, 0x03, 0x8f, 0xa6,
	0xed, 0xb1, 0x81, 0x48, 0x12, 0xd8, 0x8f, 0x3d, 0x2c, 0xd2, 0x21, 0x58, 0x72, 0x13, 0x2d, 0xd9,
	0xc0, 0xd8, 0xf9, 0xd1, 0x51, 0x45, 0x9e, 0xb0, 0xab, 0xee, 0x1c, 0x10, 0x78, 0x9d, 0x27, 0xe8,
	0x66, 0x91, 0x66, 0x09, 0xb7, 0x02, 0x52, 0xaf, 0xe1, 0xef, 0x92, 0x29, 0xd4, 0x8f, 0x61, 0x4f,
	0x43, 0x9e, 0x47, 0x3a, 0x16, 0xec, 0xba, 0xdb, 0x93, 0x0f, 0xe9, 0x2a, 0xa9, 0x65, 0x70, 0xaf,
	0xd9, 0x0d, 0x3c, 0x3f, 0x17, 0xc0, 0x5a, 0x75, 0x2e, 0x47, 0x52, 0x85, 0x8e, 0xec, 0x22, 0xd9,
	0x76, 0x18, 0xf6, 0x01, 0xb0, 0x4e, 0x04, 0x67, 0xef, 0x04, 0x37, 0x51, 0xd0, 0x02, 0xc4, 0xd1,
	0x9b, 0xa4, 0x95, 0x9e, 0xa4, 0x6f, 0x21, 0xdb, 0x4c, 0xa7, 0xb9, 0x40, 0xf2, 0x63, 0x4f, 0xde,
	0xf2, 0x24, 0x3f, 0x76, 0xe4, 0x65, 0x52, 0x7f, 0x27, 0xd0, 0x3c, 0xff, 0x45, 0xc6, 0x47, 0x90,
	0x04, 0x5d, 0x23, 0x8c, 0xb9, 0xe5, 0xec, 0xb6, 0x3b, 0x01, 0x00, 0xf6, 0xb8, 0xe5, 0xb0, 0x9a,
	0x5c, 0x1c, 0x49, 0xf1, 0x0e, 0xaf, 0xcd, 0xff, 0xdc, 0xb5, 0x71, 0x88, 0xbf, 0x36, 0x48, 0x3a,
	0xff, 0xde, 0x71, 0x34, 0x20, 0xbb, 0xe8, 0xdb, 0x2e, 0xe9, 0x20, 0x3d, 0x15, 0xf4, 0xdc, 0x01,
	0x02, 0xf6, 0xc6, 0x29, 0x7c, 0x3b, 0x70, 0xf4, 0xff, 0x4f, 0xda, 0x81, 0x23, 0xaf, 0x93, 0x36,
	0x90, 0xd3, 0xec, 0xbb, 0xae, 0xfc, 0xb0, 0x98, 0xf8, 0x64, 0x70, 0x94, 0xce, 0xc1, 0xd2, 0xec,
	0xde, 0xb4, 0x23, 0x60, 0x88, 0x87, 0x98, 0x0b, 0x6e, 0x45, 0x1c, 0x72, 0xcb, 0xee, 0x3b, 0x93,
	0x7a, 0xe4, 0xa9, 0x05, 0xba, 0xc8, 0xe2, 0x29, 0xfd, 0xc0, 0xd1, 0x1e, 0x79, 0x6a, 0xe9, 0x3d,
	0x52, 0xc3, 0x7e, 0xc6, 0xb6, 0xbb, 0x95, 0x5e, 0x7b, 0x67, 0x6d, 0xfb, 0xc3, 0xb6, 0xbe, 0xfd,
	0x0c, 0xc8, 0xc0, 0x69, 0xe8, 0x1d, 0x32, 0x1f, 0x71, 0x6b, 0xd8, 0x17, 0xdd, 0x6a, 0xaf, 0xbd,
	0xb3, 0x72, 0x5e, 0xbb, 0xcb, 0x6d, 0x80, 0x02, 0x10, 0x5a, 0x3e, 0x32, 0xec, 0xcb, 0x72, 0xe1,
	0x2b, 0x3e, 0x0a, 0x50, 0x00, 0x42, 0x33, 0x2e, 0x0c, 0x7b, 0x58, 0x2e, 0x1c, 0x8c, 0x8b, 0x00,
	0x05, 0xf4, 0x31, 0x69, 0x8d, 0x70, 0x9c, 0x48, 0x61, 0xd8, 0x0e, 0xaa, 0x37, 0xcf, 0xab, 0xfb,
	0xa7, 0x33, 0x27, 0x38, 0x55, 0xd3, 0x87, 0xa4, 0x8e, 0x2e, 0x31, 0xec, 0x11, 0xe6, 0xad, 0x97,
	0xe5, 0xa1, 0x6f, 0x02, 0x2f, 0x84, 0x14, 0xec, 0x3d, 0x86, 0x7d, 0xf5, 0xe9, 0x14, 0x6c, 0x44,
	0x81, 0x17, 0xd2, 0x27, 0xa4, 0x83, 0xd6, 0x92, 0x2a, 0x16, 0xc7, 0xc2, 0xb0, 0xaf, 0x31, 0xf1,
	0xda, 0x47, 0x3b, 0xca, 0x44, 0x04, 0xc9, 0x7d, 0x90, 0x05, 0x6d, 0x48, 0xe9, 0xbb, 0x0c, 0x7a,
	0x89, 0x54, 0x65, 0x6c, 0xd8, 0x37, 0xdd, 0x6a, 0xaf, 0x1a, 0xc0, 0x23, 0xbd, 0x4b, 0x6a, 0x20,
	0x30, 0xec, 0x5b, 0x2c, 0xb6, 0x5a, 0x56, 0x2c, 0x70, 0x12, 0xfa, 0x80, 0x34, 0xcc, 0xb8, 0x80,
	0x5e, 0xc5, 0xbe, 0xc3, 0x57, 0x59, 0x7a, 0x98, 0x53, 0x0d, 0x5d, 0x23, 0x75, 0x33, 0x2e, 0xe0,
	0xa6, 0x3f, 0xc6, 0x26, 0x51, 0x33, 0xe3, 0xa2, 0x1f, 0x6f, 0x3d, 0x21, 0x64, 0x5f, 0xeb, 0xd8,
	0xbc, 0x39, 0x14, 0x39, 0xf6, 0x46, 0x6c, 0x7e, 0xb0, 0xac, 0x0a, 0x2e, 0x0b, 0xa7, 0x64, 0x3f,
	0x36, 0xd0, 0xa2, 0x5c, 0xbe, 0x61, 0x73, 0xc8, 0xd4, 0xb1, 0x80, 0xd9, 0xfa, 0x63, 0x9e, 0xb4,
	0x60, 0x83, 0xae, 0x02, 0xb4, 0x06, 0x3e, 0x12, 0x6e, 0x24, 0xd7, 0x02, 0x17, 0x60, 0x43, 0xe6,
	0x23, 0x11, 0x1a, 0xf9, 0xde, 0x8d, 0xe6, 0x5a, 0xd0, 0x04, 0x60, 0x20, 0xdf, 0x8b, 0xb3, 0x4e,
	0xaf, 0xfa, 0xde, 0xe9, 0x9d, 0xbe, 0x41, 0x9a, 0x63, 0x31, 0x79, 0xa7, 0xf3, 0xd8, 0xf8, 0x29,
	0x7d, 0x12, 0x9f, 0x0c, 0xfa, 0xda, 0x99, 0x41, 0x7f, 0x66, 0xa8, 0xd7, 0x3f, 0x39, 0xd4, 0x1b,
	0x1f, 0x0e, 0xf5, 0x35, 0x52, 0xb7, 0x7c, 0x04, 0x84, 0x1b, 0xca, 0x35, 0xcb, 0x47, 0x0e, 0x8e,
	0xb8, 0x05, 0xd8, 0xcd, 0xe3, 0x5a, 0xc4, 0xed, 0xc7, 0x9f, 0x00, 0xa4, 0xec, 0x13, 0xe0, 0xb4,
	0x85, 0xb5, 0xff, 0xad, 0x85, 0x75, 0xce, 0xb5, 0xb0, 0x0f, 0xa7, 0xf4, 0x42, 0xc9, 0x94, 0x36,
	0x96, 0xdb, 0xc2, 0xe0, 0x34, 0x6e, 0x05, 0x3e, 0x82, 0x9a, 0x91, 0x2e, 0x32, 0xad, 0x60, 0x3d,
	0x4b, 0xb8, 0x9e, 0xa6, 0x03, 0xfa, 0x31, 0xbc, 0x8d, 0x23, 0x9e, 0xc8, 0xd8, 0x4f, 0x5f, 0x17,
	0x40, 0x29, 0xa9, 0x8e, 0xa4, 0x15, 0x38, 0x69, 0xe1, 0x94, 0x30, 0xf2, 0xdf, 0x52, 0xf4, 0xe4,
	0x5b, 0xca, 0xfb, 0x73, 0xe5, 0xd4, 0x9f, 0xa7, 0x26, 0x5a, 0x3d, 0x6b, 0xa2, 0xbf, 0x2b, 0xa4,
	0x83, 0x17, 0x44, 0x98, 0x4c, 0x2b, 0x23, 0xe8, 0x7d, 0x52, 0x17, 0xee, 0x4b, 0xa7, 0x82, 0xd6,
	0x5c, 0x2d, 0xbd, 0x4e, 0x5e, 0x03, 0x2d, 0x09, 0xcc, 0x90, 0xa3, 0x33, 0x4a, 0x5a, 0xd2, 0x4b,
	0x20, 0x9d, 0x95, 0x72, 0xb8, 0x22, 0xf0, 0x52, 0x0d, 0xab, 0x96, 0x5f, 0x11, 0xac, 0xec, 0x24,
	0x50, 0x58, 0xe4, 0xb9, 0xce, 0xd1, 0x3c, 0x25, 0x85, 0x7f, 0x06, 0x32, 0x70, 0x1a, 0xda, 0x23,
	0xf3, 0x52, 0x1d, 0x68, 0x34, 0x54, 0x59, 0x5d, 0x75, 0xa0, 0x03, 0x54, 0xec, 0xfc, 0xd5, 0x24,
	0x6d, 0xf8, 0x99, 0x81, 0xc8, 0x8f, 0xe0, 0xcd, 0xfd, 0x48, 0xea, 0xbb, 0xd8, 0x7e, 0x69, 0xe9,
	0x6a, 0x36, 0xae, 0x96, 0xae, 0xd1, 0x9f, 0xd5, 0xd6, 0x7f, 0x20, 0xff, 0x35, 0xf6, 0xe7, 0xd9,
	0xf3, 0xf7, 0x44, 0x22, 0x66, 0xce, 0xff, 0x81, 0xcc, 0x3f, 0x87, 0x2f, 0xb7, 0xd9, 0x57, 0xaf,
	0x92, 0xd9, 0xf3, 0x7f, 0x22, 0x0d, 0xff, 0xed, 0x36, 0x63, 0x81, 0xa7, 0xa4, 0xb5, 0x27, 0x92,
	0x0b, 0x95, 0x78, 0x42, 0x9a, 0x81, 0x88, 0xf4, 0x91, 0xc8, 0x27, 0xb3, 0xef, 0x62, 0x4f, 0x18,
	0x9b, 0xeb, 0x59, 0x0b, 0x7c, 0x4f, 0xaa, 0xfb, 0xc2, 0xce, 0x98, 0xbc, 0x4f, 0x5a, 0xd8, 0xc5,
	0xe1, 0x20, 0xe9, 0xc6, 0x79, 0xf1, 0x69, 0x83, 0xff, 0x3c, 0x2b, 0x59, 0x2e, 0x93, 0x0b, 0x1c,
	0x83, 0x34, 0x59, 0xc2, 0x27, 0xb3, 0xbf, 0xcc, 0xc1, 0xb8, 0xb8, 0xd0, 0x1a, 0xc0, 0xce, 0x70,
	0x0e, 0xb3, 0x65, 0xef, 0x92, 0xfa, 0x40, 0xf0, 0x3c, 0x3a, 0xa4, 0xa5, 0xdf, 0x00, 0x9f, 0x77,
	0x8c, 0xbf, 0x92, 0x05, 0x57, 0xc4, 0xdd, 0xcb, 0xf8, 0x02, 0xb5, 0x86, 0x75, 0xfc, 0xc7, 0xfb,
	0xe8, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x37, 0x23, 0x77, 0x05, 0x8c, 0x0f, 0x00, 0x00,
}
