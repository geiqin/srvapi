// Code generated by protoc-gen-go. DO NOT EDIT.
// source: coupon.proto

package geiqin_srv_ims_coupon

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//优惠劵
type Coupon struct {
	Id                   int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PromotionId          int64           `protobuf:"varint,2,opt,name=promotion_id,json=promotionId,proto3" json:"promotion_id,omitempty"`
	CouponSn             string          `protobuf:"bytes,3,opt,name=coupon_sn,json=couponSn,proto3" json:"coupon_sn,omitempty"`
	Title                string          `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Total                int32           `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
	Stock                int32           `protobuf:"varint,6,opt,name=stock,proto3" json:"stock,omitempty"`
	IsAtLeast            bool            `protobuf:"varint,7,opt,name=is_at_least,json=isAtLeast,proto3" json:"is_at_least,omitempty"`
	AtLeast              float32         `protobuf:"fixed32,8,opt,name=at_least,json=atLeast,proto3" json:"at_least,omitempty"`
	EffectiveType        int32           `protobuf:"varint,9,opt,name=effective_type,json=effectiveType,proto3" json:"effective_type,omitempty"`
	EffectiveFixedTerm   int32           `protobuf:"varint,10,opt,name=effective_fixed_term,json=effectiveFixedTerm,proto3" json:"effective_fixed_term,omitempty"`
	EffectiveStartAt     string          `protobuf:"bytes,11,opt,name=effective_start_at,json=effectiveStartAt,proto3" json:"effective_start_at,omitempty"`
	EffectiveEndAt       string          `protobuf:"bytes,12,opt,name=effective_end_at,json=effectiveEndAt,proto3" json:"effective_end_at,omitempty"`
	ExpireNotice         bool            `protobuf:"varint,13,opt,name=expire_notice,json=expireNotice,proto3" json:"expire_notice,omitempty"`
	IsExpired            bool            `protobuf:"varint,14,opt,name=is_expired,json=isExpired,proto3" json:"is_expired,omitempty"`
	IsOngoing            bool            `protobuf:"varint,15,opt,name=is_ongoing,json=isOngoing,proto3" json:"is_ongoing,omitempty"`
	IsForbidPreference   bool            `protobuf:"varint,16,opt,name=is_forbid_preference,json=isForbidPreference,proto3" json:"is_forbid_preference,omitempty"`
	IsShare              bool            `protobuf:"varint,17,opt,name=is_share,json=isShare,proto3" json:"is_share,omitempty"`
	IsCancel             bool            `protobuf:"varint,18,opt,name=is_cancel,json=isCancel,proto3" json:"is_cancel,omitempty"`
	IsDelete             bool            `protobuf:"varint,19,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	IsSyncWeixin         bool            `protobuf:"varint,20,opt,name=is_sync_weixin,json=isSyncWeixin,proto3" json:"is_sync_weixin,omitempty"`
	NeedUserLevel        int32           `protobuf:"varint,21,opt,name=need_user_level,json=needUserLevel,proto3" json:"need_user_level,omitempty"`
	PreferentialType     int32           `protobuf:"varint,22,opt,name=preferential_type,json=preferentialType,proto3" json:"preferential_type,omitempty"`
	PreferentialMoney    float32         `protobuf:"fixed32,23,opt,name=preferential_money,json=preferentialMoney,proto3" json:"preferential_money,omitempty"`
	PreferentialDiscount float32         `protobuf:"fixed32,24,opt,name=preferential_discount,json=preferentialDiscount,proto3" json:"preferential_discount,omitempty"`
	Quota                int32           `protobuf:"varint,25,opt,name=quota,proto3" json:"quota,omitempty"`
	ExchangeNum          int32           `protobuf:"varint,26,opt,name=exchange_num,json=exchangeNum,proto3" json:"exchange_num,omitempty"`
	RangeType            string          `protobuf:"bytes,27,opt,name=range_type,json=rangeType,proto3" json:"range_type,omitempty"`
	ServicePhone         string          `protobuf:"bytes,28,opt,name=service_phone,json=servicePhone,proto3" json:"service_phone,omitempty"`
	TotalFansTaked       int32           `protobuf:"varint,29,opt,name=total_fans_taked,json=totalFansTaked,proto3" json:"total_fans_taked,omitempty"`
	TotalFansUsed        int32           `protobuf:"varint,30,opt,name=total_fans_used,json=totalFansUsed,proto3" json:"total_fans_used,omitempty"`
	TotalTaked           int32           `protobuf:"varint,31,opt,name=total_taked,json=totalTaked,proto3" json:"total_taked,omitempty"`
	TotalUsed            int32           `protobuf:"varint,32,opt,name=total_used,json=totalUsed,proto3" json:"total_used,omitempty"`
	CouponUrl            string          `protobuf:"bytes,33,opt,name=coupon_url,json=couponUrl,proto3" json:"coupon_url,omitempty"`
	Description          string          `protobuf:"bytes,34,opt,name=description,proto3" json:"description,omitempty"`
	Status               int32           `protobuf:"varint,35,opt,name=status,proto3" json:"status,omitempty"`
	WeixinTitle          string          `protobuf:"bytes,36,opt,name=weixin_title,json=weixinTitle,proto3" json:"weixin_title,omitempty"`
	WeixinSubTitle       string          `protobuf:"bytes,37,opt,name=weixin_sub_title,json=weixinSubTitle,proto3" json:"weixin_sub_title,omitempty"`
	WeixinColor          string          `protobuf:"bytes,38,opt,name=weixin_color,json=weixinColor,proto3" json:"weixin_color,omitempty"`
	ReceiveType          string          `protobuf:"bytes,39,opt,name=receive_type,json=receiveType,proto3" json:"receive_type,omitempty"`
	CreatedAt            string          `protobuf:"bytes,40,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            string          `protobuf:"bytes,41,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Tickets              []*CouponTicket `protobuf:"bytes,42,rep,name=tickets,proto3" json:"tickets,omitempty"`
	Goodses              []*CouponGoods  `protobuf:"bytes,43,rep,name=goodses,proto3" json:"goodses,omitempty"`
	Ids                  []int64         `protobuf:"varint,44,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Coupon) Reset()         { *m = Coupon{} }
func (m *Coupon) String() string { return proto.CompactTextString(m) }
func (*Coupon) ProtoMessage()    {}
func (*Coupon) Descriptor() ([]byte, []int) {
	return fileDescriptor_a727a1a30518ca78, []int{0}
}

func (m *Coupon) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Coupon.Unmarshal(m, b)
}
func (m *Coupon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Coupon.Marshal(b, m, deterministic)
}
func (m *Coupon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coupon.Merge(m, src)
}
func (m *Coupon) XXX_Size() int {
	return xxx_messageInfo_Coupon.Size(m)
}
func (m *Coupon) XXX_DiscardUnknown() {
	xxx_messageInfo_Coupon.DiscardUnknown(m)
}

var xxx_messageInfo_Coupon proto.InternalMessageInfo

func (m *Coupon) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Coupon) GetPromotionId() int64 {
	if m != nil {
		return m.PromotionId
	}
	return 0
}

func (m *Coupon) GetCouponSn() string {
	if m != nil {
		return m.CouponSn
	}
	return ""
}

func (m *Coupon) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Coupon) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Coupon) GetStock() int32 {
	if m != nil {
		return m.Stock
	}
	return 0
}

func (m *Coupon) GetIsAtLeast() bool {
	if m != nil {
		return m.IsAtLeast
	}
	return false
}

func (m *Coupon) GetAtLeast() float32 {
	if m != nil {
		return m.AtLeast
	}
	return 0
}

func (m *Coupon) GetEffectiveType() int32 {
	if m != nil {
		return m.EffectiveType
	}
	return 0
}

func (m *Coupon) GetEffectiveFixedTerm() int32 {
	if m != nil {
		return m.EffectiveFixedTerm
	}
	return 0
}

func (m *Coupon) GetEffectiveStartAt() string {
	if m != nil {
		return m.EffectiveStartAt
	}
	return ""
}

func (m *Coupon) GetEffectiveEndAt() string {
	if m != nil {
		return m.EffectiveEndAt
	}
	return ""
}

func (m *Coupon) GetExpireNotice() bool {
	if m != nil {
		return m.ExpireNotice
	}
	return false
}

func (m *Coupon) GetIsExpired() bool {
	if m != nil {
		return m.IsExpired
	}
	return false
}

func (m *Coupon) GetIsOngoing() bool {
	if m != nil {
		return m.IsOngoing
	}
	return false
}

func (m *Coupon) GetIsForbidPreference() bool {
	if m != nil {
		return m.IsForbidPreference
	}
	return false
}

func (m *Coupon) GetIsShare() bool {
	if m != nil {
		return m.IsShare
	}
	return false
}

func (m *Coupon) GetIsCancel() bool {
	if m != nil {
		return m.IsCancel
	}
	return false
}

func (m *Coupon) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

func (m *Coupon) GetIsSyncWeixin() bool {
	if m != nil {
		return m.IsSyncWeixin
	}
	return false
}

func (m *Coupon) GetNeedUserLevel() int32 {
	if m != nil {
		return m.NeedUserLevel
	}
	return 0
}

func (m *Coupon) GetPreferentialType() int32 {
	if m != nil {
		return m.PreferentialType
	}
	return 0
}

func (m *Coupon) GetPreferentialMoney() float32 {
	if m != nil {
		return m.PreferentialMoney
	}
	return 0
}

func (m *Coupon) GetPreferentialDiscount() float32 {
	if m != nil {
		return m.PreferentialDiscount
	}
	return 0
}

func (m *Coupon) GetQuota() int32 {
	if m != nil {
		return m.Quota
	}
	return 0
}

func (m *Coupon) GetExchangeNum() int32 {
	if m != nil {
		return m.ExchangeNum
	}
	return 0
}

func (m *Coupon) GetRangeType() string {
	if m != nil {
		return m.RangeType
	}
	return ""
}

func (m *Coupon) GetServicePhone() string {
	if m != nil {
		return m.ServicePhone
	}
	return ""
}

func (m *Coupon) GetTotalFansTaked() int32 {
	if m != nil {
		return m.TotalFansTaked
	}
	return 0
}

func (m *Coupon) GetTotalFansUsed() int32 {
	if m != nil {
		return m.TotalFansUsed
	}
	return 0
}

func (m *Coupon) GetTotalTaked() int32 {
	if m != nil {
		return m.TotalTaked
	}
	return 0
}

func (m *Coupon) GetTotalUsed() int32 {
	if m != nil {
		return m.TotalUsed
	}
	return 0
}

func (m *Coupon) GetCouponUrl() string {
	if m != nil {
		return m.CouponUrl
	}
	return ""
}

func (m *Coupon) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Coupon) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Coupon) GetWeixinTitle() string {
	if m != nil {
		return m.WeixinTitle
	}
	return ""
}

func (m *Coupon) GetWeixinSubTitle() string {
	if m != nil {
		return m.WeixinSubTitle
	}
	return ""
}

func (m *Coupon) GetWeixinColor() string {
	if m != nil {
		return m.WeixinColor
	}
	return ""
}

func (m *Coupon) GetReceiveType() string {
	if m != nil {
		return m.ReceiveType
	}
	return ""
}

func (m *Coupon) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Coupon) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Coupon) GetTickets() []*CouponTicket {
	if m != nil {
		return m.Tickets
	}
	return nil
}

func (m *Coupon) GetGoodses() []*CouponGoods {
	if m != nil {
		return m.Goodses
	}
	return nil
}

func (m *Coupon) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

//
type CouponResponse struct {
	Entity               *Coupon   `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Pager                *Pager    `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager,omitempty"`
	Items                []*Coupon `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	Error                *Error    `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Info                 *Info     `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CouponResponse) Reset()         { *m = CouponResponse{} }
func (m *CouponResponse) String() string { return proto.CompactTextString(m) }
func (*CouponResponse) ProtoMessage()    {}
func (*CouponResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a727a1a30518ca78, []int{1}
}

func (m *CouponResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CouponResponse.Unmarshal(m, b)
}
func (m *CouponResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CouponResponse.Marshal(b, m, deterministic)
}
func (m *CouponResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CouponResponse.Merge(m, src)
}
func (m *CouponResponse) XXX_Size() int {
	return xxx_messageInfo_CouponResponse.Size(m)
}
func (m *CouponResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CouponResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CouponResponse proto.InternalMessageInfo

func (m *CouponResponse) GetEntity() *Coupon {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *CouponResponse) GetPager() *Pager {
	if m != nil {
		return m.Pager
	}
	return nil
}

func (m *CouponResponse) GetItems() []*Coupon {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *CouponResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *CouponResponse) GetInfo() *Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterType((*Coupon)(nil), "geiqin.srv.ims.coupon.Coupon")
	proto.RegisterType((*CouponResponse)(nil), "geiqin.srv.ims.coupon.CouponResponse")
}

func init() { proto.RegisterFile("coupon.proto", fileDescriptor_a727a1a30518ca78) }

var fileDescriptor_a727a1a30518ca78 = []byte{
	// 1081 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xd1, 0x52, 0x1b, 0x37,
	0x17, 0xc7, 0x3f, 0x63, 0x30, 0xf8, 0xd8, 0x18, 0xa2, 0x8f, 0xa4, 0x0a, 0x09, 0x89, 0x03, 0x49,
	0xea, 0x36, 0xa9, 0xdb, 0x71, 0xa6, 0x77, 0xed, 0x05, 0x25, 0x90, 0xc9, 0x0c, 0x50, 0x66, 0x0d,
	0xcd, 0xf4, 0x4a, 0xb3, 0xec, 0x1e, 0x1b, 0x0d, 0x6b, 0x69, 0x23, 0x69, 0x29, 0x7e, 0x90, 0x4e,
	0xdf, 0xa3, 0xaf, 0xd1, 0x97, 0xea, 0xe8, 0x68, 0x6d, 0xcc, 0x4c, 0xa1, 0xbd, 0xf0, 0x9d, 0xf5,
	0xfb, 0xff, 0xcf, 0xd1, 0x1e, 0xe9, 0x48, 0x32, 0x34, 0x13, 0x5d, 0xe4, 0x5a, 0x75, 0x73, 0xa3,
	0x9d, 0x66, 0x0f, 0x87, 0x28, 0x3f, 0x4b, 0xd5, 0xb5, 0xe6, 0xaa, 0x2b, 0x47, 0xb6, 0x1b, 0xc4,
	0xcd, 0x66, 0xa2, 0x47, 0xa3, 0x89, 0x69, 0xf3, 0x41, 0xa0, 0x1f, 0xb4, 0x4e, 0x6d, 0x89, 0x58,
	0x40, 0xa7, 0x32, 0xb9, 0x44, 0x17, 0xd8, 0xf6, 0x1f, 0x4d, 0xa8, 0xed, 0x11, 0x66, 0x2d, 0x58,
	0x90, 0x29, 0xaf, 0xb4, 0x2b, 0x9d, 0x6a, 0xb4, 0x20, 0x53, 0xf6, 0x02, 0x9a, 0xb9, 0xd1, 0x23,
	0xed, 0xa4, 0x56, 0x42, 0xa6, 0x7c, 0x81, 0x94, 0xc6, 0x94, 0x7d, 0x4c, 0xd9, 0x13, 0xa8, 0x87,
	0x9c, 0xc2, 0x2a, 0x5e, 0x6d, 0x57, 0x3a, 0xf5, 0x68, 0x25, 0x80, 0xbe, 0x62, 0x1b, 0xb0, 0xe4,
	0xa4, 0xcb, 0x90, 0x2f, 0x92, 0x10, 0x06, 0x44, 0xb5, 0x8b, 0x33, 0xbe, 0xd4, 0xae, 0x74, 0x96,
	0xa2, 0x30, 0xf0, 0xd4, 0x3a, 0x9d, 0x5c, 0xf2, 0x5a, 0xa0, 0x34, 0x60, 0xcf, 0xa0, 0x21, 0xad,
	0x88, 0x9d, 0xc8, 0x30, 0xb6, 0x8e, 0x2f, 0xb7, 0x2b, 0x9d, 0x95, 0xa8, 0x2e, 0xed, 0xae, 0x3b,
	0xf4, 0x80, 0x3d, 0x86, 0x95, 0xa9, 0xb8, 0xd2, 0xae, 0x74, 0x16, 0xa2, 0xe5, 0xb8, 0x94, 0x5e,
	0x41, 0x0b, 0x07, 0x03, 0x4c, 0x9c, 0xbc, 0x42, 0xe1, 0xc6, 0x39, 0xf2, 0x3a, 0x65, 0x5e, 0x9d,
	0xd2, 0xd3, 0x71, 0x8e, 0xec, 0x3b, 0xd8, 0xb8, 0xb1, 0x0d, 0xe4, 0x35, 0xa6, 0xc2, 0xa1, 0x19,
	0x71, 0x20, 0x33, 0x9b, 0x6a, 0x07, 0x5e, 0x3a, 0x45, 0x33, 0x62, 0x6f, 0xe1, 0x86, 0x0a, 0xeb,
	0x62, 0xe3, 0x44, 0xec, 0x78, 0x83, 0x4a, 0x5c, 0x9f, 0x2a, 0x7d, 0x2f, 0xec, 0x3a, 0xd6, 0x81,
	0x1b, 0x26, 0x50, 0xa5, 0xde, 0xdb, 0x24, 0xef, 0xcd, 0xe7, 0xed, 0xab, 0x74, 0xd7, 0xb1, 0x1d,
	0x58, 0xc5, 0xeb, 0x5c, 0x1a, 0x14, 0x4a, 0x3b, 0x99, 0x20, 0x5f, 0xa5, 0x6a, 0x9b, 0x01, 0x1e,
	0x13, 0x63, 0x5b, 0x00, 0xd2, 0x8a, 0x80, 0x52, 0xde, 0x9a, 0xac, 0xc7, 0x7e, 0x00, 0xa5, 0xac,
	0xd5, 0x50, 0x4b, 0x35, 0xe4, 0x6b, 0x13, 0xf9, 0xe7, 0x00, 0x7c, 0xb1, 0xd2, 0x8a, 0x81, 0x36,
	0xe7, 0x32, 0x15, 0xb9, 0xc1, 0x01, 0x1a, 0x54, 0x09, 0xf2, 0x75, 0x32, 0x32, 0x69, 0x0f, 0x48,
	0x3a, 0x99, 0x2a, 0x7e, 0x81, 0xa5, 0x15, 0xf6, 0x22, 0x36, 0xc8, 0x1f, 0x90, 0x6b, 0x59, 0xda,
	0xbe, 0x1f, 0xfa, 0xad, 0x97, 0x56, 0x24, 0xb1, 0x4a, 0x30, 0xe3, 0x8c, 0xb4, 0x15, 0x69, 0xf7,
	0x68, 0x5c, 0x8a, 0x29, 0x66, 0xe8, 0x90, 0xff, 0x7f, 0x22, 0xbe, 0xa7, 0x31, 0x7b, 0x09, 0x2d,
	0x9f, 0x74, 0xac, 0x12, 0xf1, 0x1b, 0xca, 0x6b, 0xa9, 0xf8, 0x46, 0x28, 0x55, 0xda, 0xfe, 0x58,
	0x25, 0x9f, 0x88, 0xb1, 0xd7, 0xb0, 0xa6, 0x10, 0x53, 0x51, 0x58, 0x34, 0x22, 0xc3, 0x2b, 0xcc,
	0xf8, 0xc3, 0xb0, 0x83, 0x1e, 0x9f, 0x59, 0x34, 0x87, 0x1e, 0xb2, 0x37, 0xf0, 0x60, 0x52, 0x8a,
	0x93, 0x71, 0x16, 0xf6, 0xfa, 0x11, 0x39, 0xd7, 0x67, 0x05, 0xda, 0xee, 0x6f, 0x80, 0xdd, 0x32,
	0x8f, 0xb4, 0xc2, 0x31, 0xff, 0x82, 0x5a, 0xe7, 0x56, 0x9a, 0x23, 0x2f, 0xb0, 0x77, 0xf0, 0xf0,
	0x96, 0x3d, 0x95, 0x36, 0xd1, 0x85, 0x72, 0x9c, 0x53, 0xc4, 0xc6, 0xac, 0xf8, 0xbe, 0xd4, 0x7c,
	0x2b, 0x7f, 0x2e, 0xb4, 0x8b, 0xf9, 0xe3, 0xd0, 0xca, 0x34, 0xf0, 0x87, 0x09, 0xaf, 0x93, 0x8b,
	0x58, 0x0d, 0x51, 0xa8, 0x62, 0xc4, 0x37, 0x49, 0x6c, 0x4c, 0xd8, 0x71, 0x31, 0xf2, 0xbb, 0x67,
	0x48, 0xa7, 0x12, 0x9e, 0x50, 0x97, 0xd4, 0x89, 0xd0, 0xb7, 0xef, 0xc0, 0xaa, 0x45, 0x73, 0x25,
	0x13, 0x14, 0xf9, 0x85, 0x56, 0xc8, 0x9f, 0x92, 0xa3, 0x59, 0xc2, 0x13, 0xcf, 0x7c, 0xbf, 0xd1,
	0x81, 0x12, 0x83, 0x58, 0x59, 0xe1, 0xe2, 0x4b, 0x4c, 0xf9, 0x16, 0x4d, 0xd5, 0x22, 0x7e, 0x10,
	0x2b, 0x7b, 0xea, 0xa9, 0x5f, 0xdf, 0x19, 0x67, 0x61, 0x31, 0xe5, 0xcf, 0xc2, 0xfa, 0x4e, 0x8d,
	0x67, 0x16, 0x53, 0xf6, 0x1c, 0x1a, 0xc1, 0x17, 0x92, 0x3d, 0x27, 0x0f, 0x10, 0x0a, 0x89, 0xb6,
	0x20, 0x8c, 0x42, 0x8e, 0x36, 0xe9, 0x75, 0x22, 0x14, 0xbf, 0x05, 0x50, 0x5e, 0x11, 0x85, 0xc9,
	0xf8, 0x8b, 0x50, 0x55, 0x20, 0x67, 0x26, 0x63, 0x6d, 0x68, 0xa4, 0x68, 0x13, 0x23, 0x73, 0x7f,
	0xa5, 0xf0, 0x6d, 0xd2, 0x67, 0x11, 0x7b, 0x04, 0x35, 0xeb, 0x62, 0x57, 0x58, 0xbe, 0x43, 0xb9,
	0xcb, 0x91, 0x5f, 0xd1, 0xd0, 0x3e, 0x22, 0xdc, 0x32, 0x2f, 0x43, 0x68, 0x60, 0xa7, 0x74, 0xd7,
	0x74, 0x60, 0xbd, 0xb4, 0xd8, 0xe2, 0xbc, 0xb4, 0xbd, 0x0a, 0xa7, 0x2f, 0xf0, 0x7e, 0x71, 0x1e,
	0x9c, 0x37, 0xc9, 0x12, 0x9d, 0x69, 0xc3, 0x5f, 0xcf, 0x26, 0xdb, 0xf3, 0xc8, 0x5b, 0x0c, 0x26,
	0x38, 0xbd, 0x4f, 0xbe, 0x0c, 0x96, 0x92, 0xd1, 0x16, 0xf9, 0x5a, 0x0d, 0xc6, 0x0e, 0xe9, 0x9c,
	0x77, 0xca, 0x5a, 0x03, 0xd9, 0x75, 0x5e, 0x2e, 0xf2, 0x74, 0x22, 0x7f, 0x15, 0xe4, 0x92, 0xec,
	0x3a, 0xf6, 0x23, 0x2c, 0x3b, 0xba, 0x9a, 0x2d, 0xff, 0xba, 0x5d, 0xed, 0x34, 0x7a, 0x3b, 0xdd,
	0x7f, 0xbc, 0xe8, 0xbb, 0x7b, 0x33, 0xd7, 0x78, 0x34, 0x89, 0x61, 0x3f, 0xc0, 0xf2, 0xd0, 0x5f,
	0xf6, 0x68, 0xf9, 0x1b, 0x0a, 0xdf, 0xbe, 0x37, 0x9c, 0x1e, 0x86, 0x68, 0x12, 0xc2, 0xd6, 0xa1,
	0x2a, 0x53, 0xcb, 0xdf, 0xb6, 0xab, 0x9d, 0x6a, 0xe4, 0x7f, 0x6e, 0xff, 0xbe, 0x00, 0xad, 0x60,
	0x8d, 0xd0, 0xe6, 0x5a, 0x59, 0x64, 0xdf, 0x43, 0xcd, 0x37, 0xbb, 0x1b, 0xd3, 0x2b, 0xd1, 0xe8,
	0x6d, 0xdd, 0x3b, 0x43, 0x54, 0x9a, 0x59, 0x0f, 0x96, 0xf2, 0x78, 0x88, 0x86, 0x5e, 0x90, 0x46,
	0xef, 0xe9, 0x1d, 0x51, 0x27, 0xde, 0x13, 0x05, 0x2b, 0x7b, 0x07, 0x4b, 0xd2, 0xe1, 0xc8, 0xf2,
	0x2a, 0xd5, 0xf2, 0x2f, 0x33, 0x05, 0xaf, 0x9f, 0x08, 0x8d, 0xd1, 0x86, 0x5e, 0x9c, 0xbb, 0x27,
	0xda, 0xf7, 0x9e, 0x28, 0x58, 0xd9, 0xb7, 0xb0, 0x28, 0xd5, 0x40, 0xd3, 0x73, 0xd4, 0xe8, 0x3d,
	0xb9, 0x23, 0xe4, 0xa3, 0x1a, 0xe8, 0x88, 0x8c, 0xbd, 0x3f, 0xab, 0xb0, 0x76, 0x34, 0x0e, 0x13,
	0xf7, 0xc3, 0xd9, 0x63, 0x47, 0x50, 0xfd, 0x80, 0x8e, 0xdd, 0xff, 0x95, 0x9b, 0xaf, 0xee, 0x2f,
	0xa2, 0x5c, 0xe5, 0xed, 0xff, 0xb1, 0x13, 0xa8, 0xbd, 0x47, 0x17, 0xcb, 0x6c, 0x6e, 0x19, 0x8f,
	0x61, 0xf1, 0x50, 0xda, 0xf9, 0x7d, 0xe1, 0xaf, 0xb0, 0x76, 0xa6, 0x12, 0x9d, 0x65, 0x98, 0x38,
	0x4c, 0xe7, 0x9a, 0xba, 0x0f, 0xf5, 0x5f, 0xe2, 0x4c, 0xce, 0x35, 0x69, 0xef, 0xaf, 0x45, 0x58,
	0xbd, 0xbd, 0x65, 0x27, 0x50, 0xdb, 0xa3, 0x93, 0x39, 0xcf, 0x5d, 0x3b, 0xa3, 0xc3, 0x3c, 0xdf,
	0x3e, 0xa0, 0x37, 0x73, 0x8e, 0x19, 0xcb, 0x27, 0x7a, 0x5e, 0x19, 0xe7, 0xdc, 0xfa, 0xf3, 0x6e,
	0xd4, 0x3e, 0xd4, 0xfa, 0x18, 0x9b, 0xe4, 0x82, 0xb5, 0xef, 0x08, 0xf9, 0x29, 0xb6, 0xf8, 0xe9,
	0x02, 0x0d, 0xfe, 0xe7, 0xa4, 0xe7, 0x35, 0xfa, 0xef, 0xfc, 0xee, 0xef, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x05, 0xe3, 0x83, 0x7a, 0x97, 0x0b, 0x00, 0x00,
}
