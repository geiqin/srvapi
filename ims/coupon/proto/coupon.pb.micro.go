// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: coupon.proto

package geiqin_srv_ims_coupon

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MyCouponService service

type MyCouponService interface {
	//获得优惠劵信息
	Get(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error)
	//获得优惠劵详情
	Detail(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error)
	//查询优惠券列表（客户专用）
	List(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error)
	//未领取的优惠券列表
	UncollectedList(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error)
	//可使用的优惠券列表
	ValidList(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error)
}

type myCouponService struct {
	c    client.Client
	name string
}

func NewMyCouponService(name string, c client.Client) MyCouponService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "geiqin.srv.ims.coupon"
	}
	return &myCouponService{
		c:    c,
		name: name,
	}
}

func (c *myCouponService) Get(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error) {
	req := c.c.NewRequest(c.name, "MyCouponService.Get", in)
	out := new(CouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myCouponService) Detail(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error) {
	req := c.c.NewRequest(c.name, "MyCouponService.Detail", in)
	out := new(CouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myCouponService) List(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error) {
	req := c.c.NewRequest(c.name, "MyCouponService.List", in)
	out := new(CouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myCouponService) UncollectedList(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error) {
	req := c.c.NewRequest(c.name, "MyCouponService.UncollectedList", in)
	out := new(CouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myCouponService) ValidList(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error) {
	req := c.c.NewRequest(c.name, "MyCouponService.ValidList", in)
	out := new(CouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyCouponService service

type MyCouponServiceHandler interface {
	//获得优惠劵信息
	Get(context.Context, *Coupon, *CouponResponse) error
	//获得优惠劵详情
	Detail(context.Context, *Coupon, *CouponResponse) error
	//查询优惠券列表（客户专用）
	List(context.Context, *Coupon, *CouponResponse) error
	//未领取的优惠券列表
	UncollectedList(context.Context, *Coupon, *CouponResponse) error
	//可使用的优惠券列表
	ValidList(context.Context, *Coupon, *CouponResponse) error
}

func RegisterMyCouponServiceHandler(s server.Server, hdlr MyCouponServiceHandler, opts ...server.HandlerOption) error {
	type myCouponService interface {
		Get(ctx context.Context, in *Coupon, out *CouponResponse) error
		Detail(ctx context.Context, in *Coupon, out *CouponResponse) error
		List(ctx context.Context, in *Coupon, out *CouponResponse) error
		UncollectedList(ctx context.Context, in *Coupon, out *CouponResponse) error
		ValidList(ctx context.Context, in *Coupon, out *CouponResponse) error
	}
	type MyCouponService struct {
		myCouponService
	}
	h := &myCouponServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MyCouponService{h}, opts...))
}

type myCouponServiceHandler struct {
	MyCouponServiceHandler
}

func (h *myCouponServiceHandler) Get(ctx context.Context, in *Coupon, out *CouponResponse) error {
	return h.MyCouponServiceHandler.Get(ctx, in, out)
}

func (h *myCouponServiceHandler) Detail(ctx context.Context, in *Coupon, out *CouponResponse) error {
	return h.MyCouponServiceHandler.Detail(ctx, in, out)
}

func (h *myCouponServiceHandler) List(ctx context.Context, in *Coupon, out *CouponResponse) error {
	return h.MyCouponServiceHandler.List(ctx, in, out)
}

func (h *myCouponServiceHandler) UncollectedList(ctx context.Context, in *Coupon, out *CouponResponse) error {
	return h.MyCouponServiceHandler.UncollectedList(ctx, in, out)
}

func (h *myCouponServiceHandler) ValidList(ctx context.Context, in *Coupon, out *CouponResponse) error {
	return h.MyCouponServiceHandler.ValidList(ctx, in, out)
}

// Client API for CouponService service

type CouponService interface {
	//创建优惠劵
	Create(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error)
	//修改优惠劵
	Update(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error)
	//删除优惠券
	Delete(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error)
	//撤销优惠券
	Cancel(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error)
	//获得优惠劵信息
	Get(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error)
	//查询优惠券列表（供下拉框选择用）
	List(ctx context.Context, in *BaseWhere, opts ...client.CallOption) (*CouponResponse, error)
	//查询优惠劵
	Search(ctx context.Context, in *BaseWhere, opts ...client.CallOption) (*CouponResponse, error)
}

type couponService struct {
	c    client.Client
	name string
}

func NewCouponService(name string, c client.Client) CouponService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "geiqin.srv.ims.coupon"
	}
	return &couponService{
		c:    c,
		name: name,
	}
}

func (c *couponService) Create(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error) {
	req := c.c.NewRequest(c.name, "CouponService.Create", in)
	out := new(CouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponService) Update(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error) {
	req := c.c.NewRequest(c.name, "CouponService.Update", in)
	out := new(CouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponService) Delete(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error) {
	req := c.c.NewRequest(c.name, "CouponService.Delete", in)
	out := new(CouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponService) Cancel(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error) {
	req := c.c.NewRequest(c.name, "CouponService.Cancel", in)
	out := new(CouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponService) Get(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error) {
	req := c.c.NewRequest(c.name, "CouponService.Get", in)
	out := new(CouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponService) List(ctx context.Context, in *BaseWhere, opts ...client.CallOption) (*CouponResponse, error) {
	req := c.c.NewRequest(c.name, "CouponService.List", in)
	out := new(CouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponService) Search(ctx context.Context, in *BaseWhere, opts ...client.CallOption) (*CouponResponse, error) {
	req := c.c.NewRequest(c.name, "CouponService.Search", in)
	out := new(CouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CouponService service

type CouponServiceHandler interface {
	//创建优惠劵
	Create(context.Context, *Coupon, *CouponResponse) error
	//修改优惠劵
	Update(context.Context, *Coupon, *CouponResponse) error
	//删除优惠券
	Delete(context.Context, *Coupon, *CouponResponse) error
	//撤销优惠券
	Cancel(context.Context, *Coupon, *CouponResponse) error
	//获得优惠劵信息
	Get(context.Context, *Coupon, *CouponResponse) error
	//查询优惠券列表（供下拉框选择用）
	List(context.Context, *BaseWhere, *CouponResponse) error
	//查询优惠劵
	Search(context.Context, *BaseWhere, *CouponResponse) error
}

func RegisterCouponServiceHandler(s server.Server, hdlr CouponServiceHandler, opts ...server.HandlerOption) error {
	type couponService interface {
		Create(ctx context.Context, in *Coupon, out *CouponResponse) error
		Update(ctx context.Context, in *Coupon, out *CouponResponse) error
		Delete(ctx context.Context, in *Coupon, out *CouponResponse) error
		Cancel(ctx context.Context, in *Coupon, out *CouponResponse) error
		Get(ctx context.Context, in *Coupon, out *CouponResponse) error
		List(ctx context.Context, in *BaseWhere, out *CouponResponse) error
		Search(ctx context.Context, in *BaseWhere, out *CouponResponse) error
	}
	type CouponService struct {
		couponService
	}
	h := &couponServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CouponService{h}, opts...))
}

type couponServiceHandler struct {
	CouponServiceHandler
}

func (h *couponServiceHandler) Create(ctx context.Context, in *Coupon, out *CouponResponse) error {
	return h.CouponServiceHandler.Create(ctx, in, out)
}

func (h *couponServiceHandler) Update(ctx context.Context, in *Coupon, out *CouponResponse) error {
	return h.CouponServiceHandler.Update(ctx, in, out)
}

func (h *couponServiceHandler) Delete(ctx context.Context, in *Coupon, out *CouponResponse) error {
	return h.CouponServiceHandler.Delete(ctx, in, out)
}

func (h *couponServiceHandler) Cancel(ctx context.Context, in *Coupon, out *CouponResponse) error {
	return h.CouponServiceHandler.Cancel(ctx, in, out)
}

func (h *couponServiceHandler) Get(ctx context.Context, in *Coupon, out *CouponResponse) error {
	return h.CouponServiceHandler.Get(ctx, in, out)
}

func (h *couponServiceHandler) List(ctx context.Context, in *BaseWhere, out *CouponResponse) error {
	return h.CouponServiceHandler.List(ctx, in, out)
}

func (h *couponServiceHandler) Search(ctx context.Context, in *BaseWhere, out *CouponResponse) error {
	return h.CouponServiceHandler.Search(ctx, in, out)
}
