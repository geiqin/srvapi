// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: limitDiscountGoods.proto

package geiqin_srv_ims_discount

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for LimitDiscountGoodsService service

type LimitDiscountGoodsService interface {
	Create(ctx context.Context, in *LimitDiscountGoods, opts ...client.CallOption) (*LimitDiscountGoodsResponse, error)
	Delete(ctx context.Context, in *LimitDiscountGoods, opts ...client.CallOption) (*LimitDiscountGoodsResponse, error)
	Get(ctx context.Context, in *LimitDiscountGoods, opts ...client.CallOption) (*LimitDiscountGoodsResponse, error)
	Search(ctx context.Context, in *BaseWhere, opts ...client.CallOption) (*LimitDiscountGoodsResponse, error)
}

type limitDiscountGoodsService struct {
	c    client.Client
	name string
}

func NewLimitDiscountGoodsService(name string, c client.Client) LimitDiscountGoodsService {
	return &limitDiscountGoodsService{
		c:    c,
		name: name,
	}
}

func (c *limitDiscountGoodsService) Create(ctx context.Context, in *LimitDiscountGoods, opts ...client.CallOption) (*LimitDiscountGoodsResponse, error) {
	req := c.c.NewRequest(c.name, "LimitDiscountGoodsService.Create", in)
	out := new(LimitDiscountGoodsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitDiscountGoodsService) Delete(ctx context.Context, in *LimitDiscountGoods, opts ...client.CallOption) (*LimitDiscountGoodsResponse, error) {
	req := c.c.NewRequest(c.name, "LimitDiscountGoodsService.Delete", in)
	out := new(LimitDiscountGoodsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitDiscountGoodsService) Get(ctx context.Context, in *LimitDiscountGoods, opts ...client.CallOption) (*LimitDiscountGoodsResponse, error) {
	req := c.c.NewRequest(c.name, "LimitDiscountGoodsService.Get", in)
	out := new(LimitDiscountGoodsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitDiscountGoodsService) Search(ctx context.Context, in *BaseWhere, opts ...client.CallOption) (*LimitDiscountGoodsResponse, error) {
	req := c.c.NewRequest(c.name, "LimitDiscountGoodsService.Search", in)
	out := new(LimitDiscountGoodsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LimitDiscountGoodsService service

type LimitDiscountGoodsServiceHandler interface {
	Create(context.Context, *LimitDiscountGoods, *LimitDiscountGoodsResponse) error
	Delete(context.Context, *LimitDiscountGoods, *LimitDiscountGoodsResponse) error
	Get(context.Context, *LimitDiscountGoods, *LimitDiscountGoodsResponse) error
	Search(context.Context, *BaseWhere, *LimitDiscountGoodsResponse) error
}

func RegisterLimitDiscountGoodsServiceHandler(s server.Server, hdlr LimitDiscountGoodsServiceHandler, opts ...server.HandlerOption) error {
	type limitDiscountGoodsService interface {
		Create(ctx context.Context, in *LimitDiscountGoods, out *LimitDiscountGoodsResponse) error
		Delete(ctx context.Context, in *LimitDiscountGoods, out *LimitDiscountGoodsResponse) error
		Get(ctx context.Context, in *LimitDiscountGoods, out *LimitDiscountGoodsResponse) error
		Search(ctx context.Context, in *BaseWhere, out *LimitDiscountGoodsResponse) error
	}
	type LimitDiscountGoodsService struct {
		limitDiscountGoodsService
	}
	h := &limitDiscountGoodsServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LimitDiscountGoodsService{h}, opts...))
}

type limitDiscountGoodsServiceHandler struct {
	LimitDiscountGoodsServiceHandler
}

func (h *limitDiscountGoodsServiceHandler) Create(ctx context.Context, in *LimitDiscountGoods, out *LimitDiscountGoodsResponse) error {
	return h.LimitDiscountGoodsServiceHandler.Create(ctx, in, out)
}

func (h *limitDiscountGoodsServiceHandler) Delete(ctx context.Context, in *LimitDiscountGoods, out *LimitDiscountGoodsResponse) error {
	return h.LimitDiscountGoodsServiceHandler.Delete(ctx, in, out)
}

func (h *limitDiscountGoodsServiceHandler) Get(ctx context.Context, in *LimitDiscountGoods, out *LimitDiscountGoodsResponse) error {
	return h.LimitDiscountGoodsServiceHandler.Get(ctx, in, out)
}

func (h *limitDiscountGoodsServiceHandler) Search(ctx context.Context, in *BaseWhere, out *LimitDiscountGoodsResponse) error {
	return h.LimitDiscountGoodsServiceHandler.Search(ctx, in, out)
}
