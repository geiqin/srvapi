// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: frontTable.proto

package geiqin_srv_eat

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for FrontTableService service

type FrontTableService interface {
	// 堂食点餐台
	In(ctx context.Context, in *FrontTableWhere, opts ...client.CallOption) (*FrontTableInResponse, error)
	// 外卖点餐台
	Out(ctx context.Context, in *FrontTableWhere, opts ...client.CallOption) (*FrontTableOutResponse, error)
}

type frontTableService struct {
	c    client.Client
	name string
}

func NewFrontTableService(name string, c client.Client) FrontTableService {
	return &frontTableService{
		c:    c,
		name: name,
	}
}

func (c *frontTableService) In(ctx context.Context, in *FrontTableWhere, opts ...client.CallOption) (*FrontTableInResponse, error) {
	req := c.c.NewRequest(c.name, "FrontTableService.In", in)
	out := new(FrontTableInResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontTableService) Out(ctx context.Context, in *FrontTableWhere, opts ...client.CallOption) (*FrontTableOutResponse, error) {
	req := c.c.NewRequest(c.name, "FrontTableService.Out", in)
	out := new(FrontTableOutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FrontTableService service

type FrontTableServiceHandler interface {
	// 堂食点餐台
	In(context.Context, *FrontTableWhere, *FrontTableInResponse) error
	// 外卖点餐台
	Out(context.Context, *FrontTableWhere, *FrontTableOutResponse) error
}

func RegisterFrontTableServiceHandler(s server.Server, hdlr FrontTableServiceHandler, opts ...server.HandlerOption) error {
	type frontTableService interface {
		In(ctx context.Context, in *FrontTableWhere, out *FrontTableInResponse) error
		Out(ctx context.Context, in *FrontTableWhere, out *FrontTableOutResponse) error
	}
	type FrontTableService struct {
		frontTableService
	}
	h := &frontTableServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FrontTableService{h}, opts...))
}

type frontTableServiceHandler struct {
	FrontTableServiceHandler
}

func (h *frontTableServiceHandler) In(ctx context.Context, in *FrontTableWhere, out *FrontTableInResponse) error {
	return h.FrontTableServiceHandler.In(ctx, in, out)
}

func (h *frontTableServiceHandler) Out(ctx context.Context, in *FrontTableWhere, out *FrontTableOutResponse) error {
	return h.FrontTableServiceHandler.Out(ctx, in, out)
}
