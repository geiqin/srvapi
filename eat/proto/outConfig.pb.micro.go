// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: outConfig.proto

package geiqin_srv_eat

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OutConfigService service

type OutConfigService interface {
	Get(ctx context.Context, in *OutConfig, opts ...client.CallOption) (*OutConfigResponse, error)
	Save(ctx context.Context, in *OutConfig, opts ...client.CallOption) (*OutConfigResponse, error)
}

type outConfigService struct {
	c    client.Client
	name string
}

func NewOutConfigService(name string, c client.Client) OutConfigService {
	return &outConfigService{
		c:    c,
		name: name,
	}
}

func (c *outConfigService) Get(ctx context.Context, in *OutConfig, opts ...client.CallOption) (*OutConfigResponse, error) {
	req := c.c.NewRequest(c.name, "OutConfigService.Get", in)
	out := new(OutConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outConfigService) Save(ctx context.Context, in *OutConfig, opts ...client.CallOption) (*OutConfigResponse, error) {
	req := c.c.NewRequest(c.name, "OutConfigService.Save", in)
	out := new(OutConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OutConfigService service

type OutConfigServiceHandler interface {
	Get(context.Context, *OutConfig, *OutConfigResponse) error
	Save(context.Context, *OutConfig, *OutConfigResponse) error
}

func RegisterOutConfigServiceHandler(s server.Server, hdlr OutConfigServiceHandler, opts ...server.HandlerOption) error {
	type outConfigService interface {
		Get(ctx context.Context, in *OutConfig, out *OutConfigResponse) error
		Save(ctx context.Context, in *OutConfig, out *OutConfigResponse) error
	}
	type OutConfigService struct {
		outConfigService
	}
	h := &outConfigServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OutConfigService{h}, opts...))
}

type outConfigServiceHandler struct {
	OutConfigServiceHandler
}

func (h *outConfigServiceHandler) Get(ctx context.Context, in *OutConfig, out *OutConfigResponse) error {
	return h.OutConfigServiceHandler.Get(ctx, in, out)
}

func (h *outConfigServiceHandler) Save(ctx context.Context, in *OutConfig, out *OutConfigResponse) error {
	return h.OutConfigServiceHandler.Save(ctx, in, out)
}
