// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/image.proto

package geiqin_srv_cms_media

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ImageService service

type ImageService interface {
	Update(ctx context.Context, in *UpdateImage, opts ...client.CallOption) (*ImageResponse, error)
	Get(ctx context.Context, in *Image, opts ...client.CallOption) (*ImageResponse, error)
	Search(ctx context.Context, in *Image, opts ...client.CallOption) (*ImageResponse, error)
	Delete(ctx context.Context, in *Id, opts ...client.CallOption) (*ImageResponse, error)
	List(ctx context.Context, in *Image, opts ...client.CallOption) (*ImageResponse, error)
}

type imageService struct {
	c    client.Client
	name string
}

func NewImageService(name string, c client.Client) ImageService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "geiqin.srv.cms.media"
	}
	return &imageService{
		c:    c,
		name: name,
	}
}

func (c *imageService) Update(ctx context.Context, in *UpdateImage, opts ...client.CallOption) (*ImageResponse, error) {
	req := c.c.NewRequest(c.name, "ImageService.Update", in)
	out := new(ImageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageService) Get(ctx context.Context, in *Image, opts ...client.CallOption) (*ImageResponse, error) {
	req := c.c.NewRequest(c.name, "ImageService.Get", in)
	out := new(ImageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageService) Search(ctx context.Context, in *Image, opts ...client.CallOption) (*ImageResponse, error) {
	req := c.c.NewRequest(c.name, "ImageService.Search", in)
	out := new(ImageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageService) Delete(ctx context.Context, in *Id, opts ...client.CallOption) (*ImageResponse, error) {
	req := c.c.NewRequest(c.name, "ImageService.Delete", in)
	out := new(ImageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageService) List(ctx context.Context, in *Image, opts ...client.CallOption) (*ImageResponse, error) {
	req := c.c.NewRequest(c.name, "ImageService.List", in)
	out := new(ImageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImageService service

type ImageServiceHandler interface {
	Update(context.Context, *UpdateImage, *ImageResponse) error
	Get(context.Context, *Image, *ImageResponse) error
	Search(context.Context, *Image, *ImageResponse) error
	Delete(context.Context, *Id, *ImageResponse) error
	List(context.Context, *Image, *ImageResponse) error
}

func RegisterImageServiceHandler(s server.Server, hdlr ImageServiceHandler, opts ...server.HandlerOption) error {
	type imageService interface {
		Update(ctx context.Context, in *UpdateImage, out *ImageResponse) error
		Get(ctx context.Context, in *Image, out *ImageResponse) error
		Search(ctx context.Context, in *Image, out *ImageResponse) error
		Delete(ctx context.Context, in *Id, out *ImageResponse) error
		List(ctx context.Context, in *Image, out *ImageResponse) error
	}
	type ImageService struct {
		imageService
	}
	h := &imageServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ImageService{h}, opts...))
}

type imageServiceHandler struct {
	ImageServiceHandler
}

func (h *imageServiceHandler) Update(ctx context.Context, in *UpdateImage, out *ImageResponse) error {
	return h.ImageServiceHandler.Update(ctx, in, out)
}

func (h *imageServiceHandler) Get(ctx context.Context, in *Image, out *ImageResponse) error {
	return h.ImageServiceHandler.Get(ctx, in, out)
}

func (h *imageServiceHandler) Search(ctx context.Context, in *Image, out *ImageResponse) error {
	return h.ImageServiceHandler.Search(ctx, in, out)
}

func (h *imageServiceHandler) Delete(ctx context.Context, in *Id, out *ImageResponse) error {
	return h.ImageServiceHandler.Delete(ctx, in, out)
}

func (h *imageServiceHandler) List(ctx context.Context, in *Image, out *ImageResponse) error {
	return h.ImageServiceHandler.List(ctx, in, out)
}
