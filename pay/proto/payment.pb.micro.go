// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: payment.proto

package geiqin_srv_pay

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for WeixinService service

type WeixinService interface {
	//小程序支付
	MiniPay(ctx context.Context, in *PaymentRequest, opts ...client.CallOption) (*WeixinResponse, error)
	//H5支付
	H5Pay(ctx context.Context, in *PaymentRequest, opts ...client.CallOption) (*WeixinResponse, error)
	//APP支付
	AppPay(ctx context.Context, in *PaymentRequest, opts ...client.CallOption) (*WeixinResponse, error)
	//提交付款码支付
	MicroPay(ctx context.Context, in *PaymentRequest, opts ...client.CallOption) (*WeixinResponse, error)
}

type weixinService struct {
	c    client.Client
	name string
}

func NewWeixinService(name string, c client.Client) WeixinService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "geiqin.srv.pay"
	}
	return &weixinService{
		c:    c,
		name: name,
	}
}

func (c *weixinService) MiniPay(ctx context.Context, in *PaymentRequest, opts ...client.CallOption) (*WeixinResponse, error) {
	req := c.c.NewRequest(c.name, "WeixinService.MiniPay", in)
	out := new(WeixinResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weixinService) H5Pay(ctx context.Context, in *PaymentRequest, opts ...client.CallOption) (*WeixinResponse, error) {
	req := c.c.NewRequest(c.name, "WeixinService.H5Pay", in)
	out := new(WeixinResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weixinService) AppPay(ctx context.Context, in *PaymentRequest, opts ...client.CallOption) (*WeixinResponse, error) {
	req := c.c.NewRequest(c.name, "WeixinService.AppPay", in)
	out := new(WeixinResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weixinService) MicroPay(ctx context.Context, in *PaymentRequest, opts ...client.CallOption) (*WeixinResponse, error) {
	req := c.c.NewRequest(c.name, "WeixinService.MicroPay", in)
	out := new(WeixinResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WeixinService service

type WeixinServiceHandler interface {
	//小程序支付
	MiniPay(context.Context, *PaymentRequest, *WeixinResponse) error
	//H5支付
	H5Pay(context.Context, *PaymentRequest, *WeixinResponse) error
	//APP支付
	AppPay(context.Context, *PaymentRequest, *WeixinResponse) error
	//提交付款码支付
	MicroPay(context.Context, *PaymentRequest, *WeixinResponse) error
}

func RegisterWeixinServiceHandler(s server.Server, hdlr WeixinServiceHandler, opts ...server.HandlerOption) error {
	type weixinService interface {
		MiniPay(ctx context.Context, in *PaymentRequest, out *WeixinResponse) error
		H5Pay(ctx context.Context, in *PaymentRequest, out *WeixinResponse) error
		AppPay(ctx context.Context, in *PaymentRequest, out *WeixinResponse) error
		MicroPay(ctx context.Context, in *PaymentRequest, out *WeixinResponse) error
	}
	type WeixinService struct {
		weixinService
	}
	h := &weixinServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&WeixinService{h}, opts...))
}

type weixinServiceHandler struct {
	WeixinServiceHandler
}

func (h *weixinServiceHandler) MiniPay(ctx context.Context, in *PaymentRequest, out *WeixinResponse) error {
	return h.WeixinServiceHandler.MiniPay(ctx, in, out)
}

func (h *weixinServiceHandler) H5Pay(ctx context.Context, in *PaymentRequest, out *WeixinResponse) error {
	return h.WeixinServiceHandler.H5Pay(ctx, in, out)
}

func (h *weixinServiceHandler) AppPay(ctx context.Context, in *PaymentRequest, out *WeixinResponse) error {
	return h.WeixinServiceHandler.AppPay(ctx, in, out)
}

func (h *weixinServiceHandler) MicroPay(ctx context.Context, in *PaymentRequest, out *WeixinResponse) error {
	return h.WeixinServiceHandler.MicroPay(ctx, in, out)
}

// Client API for AlipayService service

type AlipayService interface {
	//手机网站支付接口2.0（手机网站支付）
	WapPay(ctx context.Context, in *PaymentRequest, opts ...client.CallOption) (*PaymentResponse, error)
	//统一收单下单并支付页面接口（电脑网站支付）
	PagePay(ctx context.Context, in *PaymentRequest, opts ...client.CallOption) (*PaymentResponse, error)
	//APP支付接口2.0（APP支付）
	AppPay(ctx context.Context, in *PaymentRequest, opts ...client.CallOption) (*PaymentResponse, error)
}

type alipayService struct {
	c    client.Client
	name string
}

func NewAlipayService(name string, c client.Client) AlipayService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "geiqin.srv.pay"
	}
	return &alipayService{
		c:    c,
		name: name,
	}
}

func (c *alipayService) WapPay(ctx context.Context, in *PaymentRequest, opts ...client.CallOption) (*PaymentResponse, error) {
	req := c.c.NewRequest(c.name, "AlipayService.WapPay", in)
	out := new(PaymentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayService) PagePay(ctx context.Context, in *PaymentRequest, opts ...client.CallOption) (*PaymentResponse, error) {
	req := c.c.NewRequest(c.name, "AlipayService.PagePay", in)
	out := new(PaymentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayService) AppPay(ctx context.Context, in *PaymentRequest, opts ...client.CallOption) (*PaymentResponse, error) {
	req := c.c.NewRequest(c.name, "AlipayService.AppPay", in)
	out := new(PaymentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AlipayService service

type AlipayServiceHandler interface {
	//手机网站支付接口2.0（手机网站支付）
	WapPay(context.Context, *PaymentRequest, *PaymentResponse) error
	//统一收单下单并支付页面接口（电脑网站支付）
	PagePay(context.Context, *PaymentRequest, *PaymentResponse) error
	//APP支付接口2.0（APP支付）
	AppPay(context.Context, *PaymentRequest, *PaymentResponse) error
}

func RegisterAlipayServiceHandler(s server.Server, hdlr AlipayServiceHandler, opts ...server.HandlerOption) error {
	type alipayService interface {
		WapPay(ctx context.Context, in *PaymentRequest, out *PaymentResponse) error
		PagePay(ctx context.Context, in *PaymentRequest, out *PaymentResponse) error
		AppPay(ctx context.Context, in *PaymentRequest, out *PaymentResponse) error
	}
	type AlipayService struct {
		alipayService
	}
	h := &alipayServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AlipayService{h}, opts...))
}

type alipayServiceHandler struct {
	AlipayServiceHandler
}

func (h *alipayServiceHandler) WapPay(ctx context.Context, in *PaymentRequest, out *PaymentResponse) error {
	return h.AlipayServiceHandler.WapPay(ctx, in, out)
}

func (h *alipayServiceHandler) PagePay(ctx context.Context, in *PaymentRequest, out *PaymentResponse) error {
	return h.AlipayServiceHandler.PagePay(ctx, in, out)
}

func (h *alipayServiceHandler) AppPay(ctx context.Context, in *PaymentRequest, out *PaymentResponse) error {
	return h.AlipayServiceHandler.AppPay(ctx, in, out)
}
