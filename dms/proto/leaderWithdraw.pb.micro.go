// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: leaderWithdraw.proto

package geiqin_srv_dms

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MyLeaderWithdrawService service

type MyLeaderWithdrawService interface {
	//申请奖金提现
	Apply(ctx context.Context, in *LeaderWithdrawApply, opts ...client.CallOption) (*LeaderWithdrawApplyResponse, error)
	//提交奖金提现申请
	Submit(ctx context.Context, in *LeaderWithdraw, opts ...client.CallOption) (*LeaderWithdrawResponse, error)
	//获取奖金提现信息
	Get(ctx context.Context, in *LeaderWithdraw, opts ...client.CallOption) (*LeaderWithdrawResponse, error)
	//查询我的提现记录
	Search(ctx context.Context, in *LeaderWithdrawWhere, opts ...client.CallOption) (*LeaderWithdrawResponse, error)
}

type myLeaderWithdrawService struct {
	c    client.Client
	name string
}

func NewMyLeaderWithdrawService(name string, c client.Client) MyLeaderWithdrawService {
	return &myLeaderWithdrawService{
		c:    c,
		name: name,
	}
}

func (c *myLeaderWithdrawService) Apply(ctx context.Context, in *LeaderWithdrawApply, opts ...client.CallOption) (*LeaderWithdrawApplyResponse, error) {
	req := c.c.NewRequest(c.name, "MyLeaderWithdrawService.Apply", in)
	out := new(LeaderWithdrawApplyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myLeaderWithdrawService) Submit(ctx context.Context, in *LeaderWithdraw, opts ...client.CallOption) (*LeaderWithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "MyLeaderWithdrawService.Submit", in)
	out := new(LeaderWithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myLeaderWithdrawService) Get(ctx context.Context, in *LeaderWithdraw, opts ...client.CallOption) (*LeaderWithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "MyLeaderWithdrawService.Get", in)
	out := new(LeaderWithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myLeaderWithdrawService) Search(ctx context.Context, in *LeaderWithdrawWhere, opts ...client.CallOption) (*LeaderWithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "MyLeaderWithdrawService.Search", in)
	out := new(LeaderWithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyLeaderWithdrawService service

type MyLeaderWithdrawServiceHandler interface {
	//申请奖金提现
	Apply(context.Context, *LeaderWithdrawApply, *LeaderWithdrawApplyResponse) error
	//提交奖金提现申请
	Submit(context.Context, *LeaderWithdraw, *LeaderWithdrawResponse) error
	//获取奖金提现信息
	Get(context.Context, *LeaderWithdraw, *LeaderWithdrawResponse) error
	//查询我的提现记录
	Search(context.Context, *LeaderWithdrawWhere, *LeaderWithdrawResponse) error
}

func RegisterMyLeaderWithdrawServiceHandler(s server.Server, hdlr MyLeaderWithdrawServiceHandler, opts ...server.HandlerOption) error {
	type myLeaderWithdrawService interface {
		Apply(ctx context.Context, in *LeaderWithdrawApply, out *LeaderWithdrawApplyResponse) error
		Submit(ctx context.Context, in *LeaderWithdraw, out *LeaderWithdrawResponse) error
		Get(ctx context.Context, in *LeaderWithdraw, out *LeaderWithdrawResponse) error
		Search(ctx context.Context, in *LeaderWithdrawWhere, out *LeaderWithdrawResponse) error
	}
	type MyLeaderWithdrawService struct {
		myLeaderWithdrawService
	}
	h := &myLeaderWithdrawServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MyLeaderWithdrawService{h}, opts...))
}

type myLeaderWithdrawServiceHandler struct {
	MyLeaderWithdrawServiceHandler
}

func (h *myLeaderWithdrawServiceHandler) Apply(ctx context.Context, in *LeaderWithdrawApply, out *LeaderWithdrawApplyResponse) error {
	return h.MyLeaderWithdrawServiceHandler.Apply(ctx, in, out)
}

func (h *myLeaderWithdrawServiceHandler) Submit(ctx context.Context, in *LeaderWithdraw, out *LeaderWithdrawResponse) error {
	return h.MyLeaderWithdrawServiceHandler.Submit(ctx, in, out)
}

func (h *myLeaderWithdrawServiceHandler) Get(ctx context.Context, in *LeaderWithdraw, out *LeaderWithdrawResponse) error {
	return h.MyLeaderWithdrawServiceHandler.Get(ctx, in, out)
}

func (h *myLeaderWithdrawServiceHandler) Search(ctx context.Context, in *LeaderWithdrawWhere, out *LeaderWithdrawResponse) error {
	return h.MyLeaderWithdrawServiceHandler.Search(ctx, in, out)
}

// Client API for LeaderWithdrawService service

type LeaderWithdrawService interface {
	//审核奖金提现
	Check(ctx context.Context, in *LeaderWithdraw, opts ...client.CallOption) (*LeaderWithdrawResponse, error)
	//获取奖金提现信息
	Get(ctx context.Context, in *LeaderWithdraw, opts ...client.CallOption) (*LeaderWithdrawResponse, error)
	//分页查询奖金提现记录
	Search(ctx context.Context, in *LeaderWithdrawWhere, opts ...client.CallOption) (*LeaderWithdrawResponse, error)
}

type leaderWithdrawService struct {
	c    client.Client
	name string
}

func NewLeaderWithdrawService(name string, c client.Client) LeaderWithdrawService {
	return &leaderWithdrawService{
		c:    c,
		name: name,
	}
}

func (c *leaderWithdrawService) Check(ctx context.Context, in *LeaderWithdraw, opts ...client.CallOption) (*LeaderWithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "LeaderWithdrawService.Check", in)
	out := new(LeaderWithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderWithdrawService) Get(ctx context.Context, in *LeaderWithdraw, opts ...client.CallOption) (*LeaderWithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "LeaderWithdrawService.Get", in)
	out := new(LeaderWithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderWithdrawService) Search(ctx context.Context, in *LeaderWithdrawWhere, opts ...client.CallOption) (*LeaderWithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "LeaderWithdrawService.Search", in)
	out := new(LeaderWithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LeaderWithdrawService service

type LeaderWithdrawServiceHandler interface {
	//审核奖金提现
	Check(context.Context, *LeaderWithdraw, *LeaderWithdrawResponse) error
	//获取奖金提现信息
	Get(context.Context, *LeaderWithdraw, *LeaderWithdrawResponse) error
	//分页查询奖金提现记录
	Search(context.Context, *LeaderWithdrawWhere, *LeaderWithdrawResponse) error
}

func RegisterLeaderWithdrawServiceHandler(s server.Server, hdlr LeaderWithdrawServiceHandler, opts ...server.HandlerOption) error {
	type leaderWithdrawService interface {
		Check(ctx context.Context, in *LeaderWithdraw, out *LeaderWithdrawResponse) error
		Get(ctx context.Context, in *LeaderWithdraw, out *LeaderWithdrawResponse) error
		Search(ctx context.Context, in *LeaderWithdrawWhere, out *LeaderWithdrawResponse) error
	}
	type LeaderWithdrawService struct {
		leaderWithdrawService
	}
	h := &leaderWithdrawServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LeaderWithdrawService{h}, opts...))
}

type leaderWithdrawServiceHandler struct {
	LeaderWithdrawServiceHandler
}

func (h *leaderWithdrawServiceHandler) Check(ctx context.Context, in *LeaderWithdraw, out *LeaderWithdrawResponse) error {
	return h.LeaderWithdrawServiceHandler.Check(ctx, in, out)
}

func (h *leaderWithdrawServiceHandler) Get(ctx context.Context, in *LeaderWithdraw, out *LeaderWithdrawResponse) error {
	return h.LeaderWithdrawServiceHandler.Get(ctx, in, out)
}

func (h *leaderWithdrawServiceHandler) Search(ctx context.Context, in *LeaderWithdrawWhere, out *LeaderWithdrawResponse) error {
	return h.LeaderWithdrawServiceHandler.Search(ctx, in, out)
}
