// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rank.proto

package geiqin_srv_dms

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Rank struct {
	Id                   int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name                 string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	PrimaryRate          float32           `protobuf:"fixed32,3,opt,name=primary_rate,json=primaryRate,proto3" json:"primary_rate"`
	SecondRate           float32           `protobuf:"fixed32,4,opt,name=second_rate,json=secondRate,proto3" json:"second_rate"`
	ThreeRate            float32           `protobuf:"fixed32,5,opt,name=three_rate,json=threeRate,proto3" json:"three_rate"`
	RewardMoney          float32           `protobuf:"fixed32,6,opt,name=reward_money,json=rewardMoney,proto3" json:"reward_money"`
	MonthDrawMoney       float32           `protobuf:"fixed32,7,opt,name=month_draw_money,json=monthDrawMoney,proto3" json:"month_draw_money"`
	MonthDrawNum         int32             `protobuf:"varint,8,opt,name=month_draw_num,json=monthDrawNum,proto3" json:"month_draw_num"`
	LevelId              int32             `protobuf:"varint,9,opt,name=level_id,json=levelId,proto3" json:"level_id"`
	IsCondition          bool              `protobuf:"varint,10,opt,name=is_condition,json=isCondition,proto3" json:"is_condition"`
	PromotionAmount      float32           `protobuf:"fixed32,11,opt,name=promotion_amount,json=promotionAmount,proto3" json:"promotion_amount"`
	PrimaryNum           int32             `protobuf:"varint,12,opt,name=primary_num,json=primaryNum,proto3" json:"primary_num"`
	SecondNum            int32             `protobuf:"varint,13,opt,name=second_num,json=secondNum,proto3" json:"second_num"`
	IsBought             bool              `protobuf:"varint,14,opt,name=is_bought,json=isBought,proto3" json:"is_bought"`
	ConsumeAmount        float32           `protobuf:"fixed32,15,opt,name=consume_amount,json=consumeAmount,proto3" json:"consume_amount"`
	ConsumeNum           int32             `protobuf:"varint,16,opt,name=consume_num,json=consumeNum,proto3" json:"consume_num"`
	IsBindIdcard         bool              `protobuf:"varint,17,opt,name=is_bind_idcard,json=isBindIdcard,proto3" json:"is_bind_idcard"`
	IsBindMobile         bool              `protobuf:"varint,18,opt,name=is_bind_mobile,json=isBindMobile,proto3" json:"is_bind_mobile"`
	JoinFee              float32           `protobuf:"fixed32,19,opt,name=join_fee,json=joinFee,proto3" json:"join_fee"`
	Defaulted            bool              `protobuf:"varint,20,opt,name=defaulted,proto3" json:"defaulted"`
	Goodses              []*GoodsCondition `protobuf:"bytes,21,rep,name=goodses,proto3" json:"goodses"`
	Ids                  []int32           `protobuf:"varint,22,rep,packed,name=ids,proto3" json:"ids"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Rank) Reset()         { *m = Rank{} }
func (m *Rank) String() string { return proto.CompactTextString(m) }
func (*Rank) ProtoMessage()    {}
func (*Rank) Descriptor() ([]byte, []int) {
	return fileDescriptor_28127d302aca29e8, []int{0}
}

func (m *Rank) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rank.Unmarshal(m, b)
}
func (m *Rank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rank.Marshal(b, m, deterministic)
}
func (m *Rank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rank.Merge(m, src)
}
func (m *Rank) XXX_Size() int {
	return xxx_messageInfo_Rank.Size(m)
}
func (m *Rank) XXX_DiscardUnknown() {
	xxx_messageInfo_Rank.DiscardUnknown(m)
}

var xxx_messageInfo_Rank proto.InternalMessageInfo

func (m *Rank) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Rank) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Rank) GetPrimaryRate() float32 {
	if m != nil {
		return m.PrimaryRate
	}
	return 0
}

func (m *Rank) GetSecondRate() float32 {
	if m != nil {
		return m.SecondRate
	}
	return 0
}

func (m *Rank) GetThreeRate() float32 {
	if m != nil {
		return m.ThreeRate
	}
	return 0
}

func (m *Rank) GetRewardMoney() float32 {
	if m != nil {
		return m.RewardMoney
	}
	return 0
}

func (m *Rank) GetMonthDrawMoney() float32 {
	if m != nil {
		return m.MonthDrawMoney
	}
	return 0
}

func (m *Rank) GetMonthDrawNum() int32 {
	if m != nil {
		return m.MonthDrawNum
	}
	return 0
}

func (m *Rank) GetLevelId() int32 {
	if m != nil {
		return m.LevelId
	}
	return 0
}

func (m *Rank) GetIsCondition() bool {
	if m != nil {
		return m.IsCondition
	}
	return false
}

func (m *Rank) GetPromotionAmount() float32 {
	if m != nil {
		return m.PromotionAmount
	}
	return 0
}

func (m *Rank) GetPrimaryNum() int32 {
	if m != nil {
		return m.PrimaryNum
	}
	return 0
}

func (m *Rank) GetSecondNum() int32 {
	if m != nil {
		return m.SecondNum
	}
	return 0
}

func (m *Rank) GetIsBought() bool {
	if m != nil {
		return m.IsBought
	}
	return false
}

func (m *Rank) GetConsumeAmount() float32 {
	if m != nil {
		return m.ConsumeAmount
	}
	return 0
}

func (m *Rank) GetConsumeNum() int32 {
	if m != nil {
		return m.ConsumeNum
	}
	return 0
}

func (m *Rank) GetIsBindIdcard() bool {
	if m != nil {
		return m.IsBindIdcard
	}
	return false
}

func (m *Rank) GetIsBindMobile() bool {
	if m != nil {
		return m.IsBindMobile
	}
	return false
}

func (m *Rank) GetJoinFee() float32 {
	if m != nil {
		return m.JoinFee
	}
	return 0
}

func (m *Rank) GetDefaulted() bool {
	if m != nil {
		return m.Defaulted
	}
	return false
}

func (m *Rank) GetGoodses() []*GoodsCondition {
	if m != nil {
		return m.Goodses
	}
	return nil
}

func (m *Rank) GetIds() []int32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type RankResponse struct {
	Entity               *Rank    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity"`
	Pager                *Pager   `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager"`
	Items                []*Rank  `protobuf:"bytes,3,rep,name=items,proto3" json:"items"`
	Error                *Error   `protobuf:"bytes,4,opt,name=error,proto3" json:"error"`
	Info                 *Info    `protobuf:"bytes,5,opt,name=info,proto3" json:"info"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RankResponse) Reset()         { *m = RankResponse{} }
func (m *RankResponse) String() string { return proto.CompactTextString(m) }
func (*RankResponse) ProtoMessage()    {}
func (*RankResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28127d302aca29e8, []int{1}
}

func (m *RankResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RankResponse.Unmarshal(m, b)
}
func (m *RankResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RankResponse.Marshal(b, m, deterministic)
}
func (m *RankResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankResponse.Merge(m, src)
}
func (m *RankResponse) XXX_Size() int {
	return xxx_messageInfo_RankResponse.Size(m)
}
func (m *RankResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RankResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RankResponse proto.InternalMessageInfo

func (m *RankResponse) GetEntity() *Rank {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *RankResponse) GetPager() *Pager {
	if m != nil {
		return m.Pager
	}
	return nil
}

func (m *RankResponse) GetItems() []*Rank {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *RankResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *RankResponse) GetInfo() *Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterType((*Rank)(nil), "geiqin.srv.dms.Rank")
	proto.RegisterType((*RankResponse)(nil), "geiqin.srv.dms.RankResponse")
}

func init() { proto.RegisterFile("rank.proto", fileDescriptor_28127d302aca29e8) }

var fileDescriptor_28127d302aca29e8 = []byte{
	// 657 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xdd, 0x6a, 0x1b, 0x3b,
	0x10, 0xc7, 0x8f, 0xbf, 0xed, 0x59, 0xc7, 0xf1, 0xd1, 0x49, 0x0e, 0x4a, 0x4e, 0x72, 0xea, 0x84,
	0x14, 0xb6, 0x1f, 0xf8, 0xc2, 0xbd, 0x29, 0xb4, 0x14, 0x9a, 0xa4, 0x0d, 0x81, 0xa6, 0x94, 0x0d,
	0xa5, 0x97, 0x8b, 0x62, 0x8d, 0x6d, 0x35, 0x96, 0xe4, 0x4a, 0xeb, 0x84, 0x3c, 0x44, 0x9f, 0xb1,
	0x2f, 0xd0, 0x87, 0x28, 0x9a, 0x5d, 0xe7, 0x0b, 0x43, 0x21, 0xbd, 0x5b, 0xfd, 0xff, 0xbf, 0x99,
	0xf9, 0x7b, 0x90, 0x0c, 0xe0, 0x84, 0x39, 0xef, 0xcf, 0x9c, 0xcd, 0x2c, 0xeb, 0x8c, 0x51, 0x7d,
	0x53, 0xa6, 0xef, 0xdd, 0x45, 0x5f, 0x6a, 0xbf, 0xd9, 0x1e, 0x5a, 0xad, 0xad, 0xc9, 0xdd, 0xcd,
	0xb5, 0xb1, 0xb5, 0xd2, 0x1f, 0x58, 0x23, 0x55, 0xa6, 0x16, 0xea, 0xee, 0x8f, 0x1a, 0x54, 0x13,
	0x61, 0xce, 0x59, 0x07, 0xca, 0x4a, 0xf2, 0x52, 0xaf, 0x14, 0xd7, 0x92, 0xb2, 0x92, 0x8c, 0x41,
	0xd5, 0x08, 0x8d, 0xbc, 0xdc, 0x2b, 0xc5, 0xad, 0x84, 0xbe, 0xd9, 0x0e, 0xb4, 0x67, 0x4e, 0x69,
	0xe1, 0xae, 0x52, 0x27, 0x32, 0xe4, 0x95, 0x5e, 0x29, 0x2e, 0x27, 0x51, 0xa1, 0x25, 0x22, 0x43,
	0xf6, 0x08, 0x22, 0x8f, 0x43, 0x6b, 0x64, 0x4e, 0x54, 0x89, 0x80, 0x5c, 0x22, 0x60, 0x1b, 0x20,
	0x9b, 0x38, 0xc4, 0xdc, 0xaf, 0x91, 0xdf, 0x22, 0x85, 0xec, 0x1d, 0x68, 0x3b, 0xbc, 0x14, 0x4e,
	0xa6, 0xda, 0x1a, 0xbc, 0xe2, 0xf5, 0x7c, 0x44, 0xae, 0x9d, 0x04, 0x89, 0xc5, 0xd0, 0xd5, 0xd6,
	0x64, 0x93, 0x54, 0x3a, 0x71, 0x59, 0x60, 0x0d, 0xc2, 0x3a, 0xa4, 0x1f, 0x3a, 0x71, 0x99, 0x93,
	0x7b, 0xd0, 0xb9, 0x45, 0x9a, 0xb9, 0xe6, 0x4d, 0xfa, 0x7d, 0xed, 0x6b, 0xee, 0xe3, 0x5c, 0xb3,
	0x0d, 0x68, 0x4e, 0xf1, 0x02, 0xa7, 0xa9, 0x92, 0xbc, 0x45, 0x7e, 0x83, 0xce, 0xc7, 0x32, 0xa4,
	0x51, 0x3e, 0x1d, 0x2e, 0x76, 0xc6, 0xa1, 0x57, 0x8a, 0x9b, 0x49, 0xa4, 0x6e, 0xd6, 0xc8, 0x9e,
	0x40, 0x77, 0xe6, 0xac, 0xb6, 0xe1, 0x90, 0x0a, 0x6d, 0xe7, 0x26, 0xe3, 0x11, 0xa5, 0x59, 0xbd,
	0xd6, 0xdf, 0x92, 0x1c, 0x76, 0xb3, 0x58, 0x5f, 0xc8, 0xd2, 0xa6, 0x59, 0x50, 0x48, 0x21, 0xc9,
	0x36, 0x14, 0x9b, 0x22, 0x7f, 0x85, 0xfc, 0x56, 0xae, 0x04, 0xfb, 0x3f, 0x68, 0x29, 0x9f, 0x9e,
	0xd9, 0xf9, 0x78, 0x92, 0xf1, 0x0e, 0x45, 0x69, 0x2a, 0xbf, 0x4f, 0x67, 0xf6, 0x18, 0x3a, 0x43,
	0x6b, 0xfc, 0x5c, 0xe3, 0x22, 0xc5, 0x2a, 0xa5, 0x58, 0x29, 0xd4, 0x9b, 0x0c, 0x0b, 0x2c, 0xcc,
	0xe8, 0xe6, 0x19, 0x0a, 0x29, 0x0c, 0xd9, 0x83, 0x4e, 0x18, 0xa2, 0x8c, 0x4c, 0x95, 0x1c, 0x0a,
	0x27, 0xf9, 0xdf, 0x34, 0xa9, 0xad, 0xfc, 0xbe, 0x32, 0xf2, 0x98, 0xb4, 0xdb, 0x94, 0xb6, 0x67,
	0x6a, 0x8a, 0x9c, 0xdd, 0xa6, 0x4e, 0x48, 0x0b, 0x9b, 0xfd, 0x6a, 0x95, 0x49, 0x47, 0x88, 0xfc,
	0x1f, 0x4a, 0xd3, 0x08, 0xe7, 0xf7, 0x88, 0x6c, 0x0b, 0x5a, 0x12, 0x47, 0x62, 0x3e, 0xcd, 0x50,
	0xf2, 0x35, 0xaa, 0xbd, 0x11, 0xd8, 0x4b, 0x68, 0xd0, 0x6d, 0x45, 0xcf, 0xd7, 0x7b, 0x95, 0x38,
	0x1a, 0xfc, 0xdf, 0xbf, 0x7b, 0xb7, 0xfb, 0x47, 0x77, 0x2e, 0x73, 0xb2, 0xc0, 0x59, 0x17, 0x2a,
	0x4a, 0x7a, 0xfe, 0x6f, 0xaf, 0x12, 0xd7, 0x92, 0xf0, 0xb9, 0xfb, 0xb3, 0x04, 0xed, 0x70, 0xc3,
	0x13, 0xf4, 0x33, 0x6b, 0x3c, 0xb2, 0xe7, 0x50, 0x47, 0x93, 0xa9, 0xec, 0x8a, 0x6e, 0x7b, 0x34,
	0x58, 0xbb, 0xdf, 0x9b, 0xe8, 0x82, 0x61, 0xcf, 0xa0, 0x36, 0x13, 0x63, 0x74, 0xf4, 0x10, 0xa2,
	0xc1, 0xfa, 0x7d, 0xf8, 0x53, 0x30, 0x93, 0x9c, 0x61, 0x4f, 0xa1, 0xa6, 0x32, 0xd4, 0x9e, 0x57,
	0x28, 0xf5, 0xf2, 0xce, 0x39, 0x12, 0x1a, 0xa3, 0x73, 0xd6, 0xd1, 0x1b, 0x59, 0xd2, 0xf8, 0x5d,
	0x30, 0x93, 0x9c, 0x61, 0x31, 0x54, 0x95, 0x19, 0x59, 0x7a, 0x2f, 0x4b, 0xfa, 0x1e, 0x9b, 0x91,
	0x4d, 0x88, 0x18, 0x7c, 0xaf, 0x40, 0x14, 0xc6, 0x9c, 0xa2, 0xbb, 0x50, 0x43, 0x64, 0x6f, 0xa0,
	0x7e, 0xe0, 0x30, 0x3c, 0xad, 0xa5, 0x69, 0x36, 0xb7, 0x96, 0x66, 0x2c, 0x76, 0xb5, 0xfb, 0x57,
	0xa8, 0xff, 0x3c, 0x93, 0x7f, 0x54, 0x7f, 0x88, 0x53, 0x7c, 0x70, 0xfd, 0x2b, 0xa8, 0x1c, 0x61,
	0xf6, 0xc0, 0xe2, 0xd7, 0x50, 0xfd, 0xa0, 0xfc, 0x43, 0xab, 0x0f, 0xa0, 0x7e, 0x8a, 0xc2, 0x0d,
	0x27, 0x6c, 0xe3, 0x3e, 0xb9, 0x2f, 0x3c, 0x7e, 0x99, 0xa0, 0xc3, 0xdf, 0x35, 0x39, 0xab, 0xd3,
	0xff, 0xec, 0x8b, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x32, 0x01, 0x89, 0x4a, 0xa9, 0x05, 0x00,
	0x00,
}
