// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: distributor.proto

package geiqin_srv_dms

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MyDistributorService service

type MyDistributorService interface {
	//获取分销员信息
	Get(ctx context.Context, in *Distributor, opts ...client.CallOption) (*DistributorResponse, error)
	//查询我的一级分销员
	PrimarySearch(ctx context.Context, in *DistributorWhere, opts ...client.CallOption) (*DistributorResponse, error)
	//查询我的二级分销员
	SecondSearch(ctx context.Context, in *DistributorWhere, opts ...client.CallOption) (*DistributorResponse, error)
	//检查用户是否是分销员
	Exists(ctx context.Context, in *DistributorWhere, opts ...client.CallOption) (*DistributorResponse, error)
}

type myDistributorService struct {
	c    client.Client
	name string
}

func NewMyDistributorService(name string, c client.Client) MyDistributorService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "geiqin.srv.dms"
	}
	return &myDistributorService{
		c:    c,
		name: name,
	}
}

func (c *myDistributorService) Get(ctx context.Context, in *Distributor, opts ...client.CallOption) (*DistributorResponse, error) {
	req := c.c.NewRequest(c.name, "MyDistributorService.Get", in)
	out := new(DistributorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myDistributorService) PrimarySearch(ctx context.Context, in *DistributorWhere, opts ...client.CallOption) (*DistributorResponse, error) {
	req := c.c.NewRequest(c.name, "MyDistributorService.PrimarySearch", in)
	out := new(DistributorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myDistributorService) SecondSearch(ctx context.Context, in *DistributorWhere, opts ...client.CallOption) (*DistributorResponse, error) {
	req := c.c.NewRequest(c.name, "MyDistributorService.SecondSearch", in)
	out := new(DistributorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myDistributorService) Exists(ctx context.Context, in *DistributorWhere, opts ...client.CallOption) (*DistributorResponse, error) {
	req := c.c.NewRequest(c.name, "MyDistributorService.Exists", in)
	out := new(DistributorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyDistributorService service

type MyDistributorServiceHandler interface {
	//获取分销员信息
	Get(context.Context, *Distributor, *DistributorResponse) error
	//查询我的一级分销员
	PrimarySearch(context.Context, *DistributorWhere, *DistributorResponse) error
	//查询我的二级分销员
	SecondSearch(context.Context, *DistributorWhere, *DistributorResponse) error
	//检查用户是否是分销员
	Exists(context.Context, *DistributorWhere, *DistributorResponse) error
}

func RegisterMyDistributorServiceHandler(s server.Server, hdlr MyDistributorServiceHandler, opts ...server.HandlerOption) error {
	type myDistributorService interface {
		Get(ctx context.Context, in *Distributor, out *DistributorResponse) error
		PrimarySearch(ctx context.Context, in *DistributorWhere, out *DistributorResponse) error
		SecondSearch(ctx context.Context, in *DistributorWhere, out *DistributorResponse) error
		Exists(ctx context.Context, in *DistributorWhere, out *DistributorResponse) error
	}
	type MyDistributorService struct {
		myDistributorService
	}
	h := &myDistributorServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MyDistributorService{h}, opts...))
}

type myDistributorServiceHandler struct {
	MyDistributorServiceHandler
}

func (h *myDistributorServiceHandler) Get(ctx context.Context, in *Distributor, out *DistributorResponse) error {
	return h.MyDistributorServiceHandler.Get(ctx, in, out)
}

func (h *myDistributorServiceHandler) PrimarySearch(ctx context.Context, in *DistributorWhere, out *DistributorResponse) error {
	return h.MyDistributorServiceHandler.PrimarySearch(ctx, in, out)
}

func (h *myDistributorServiceHandler) SecondSearch(ctx context.Context, in *DistributorWhere, out *DistributorResponse) error {
	return h.MyDistributorServiceHandler.SecondSearch(ctx, in, out)
}

func (h *myDistributorServiceHandler) Exists(ctx context.Context, in *DistributorWhere, out *DistributorResponse) error {
	return h.MyDistributorServiceHandler.Exists(ctx, in, out)
}

// Client API for DistributorService service

type DistributorService interface {
	//编辑销售员信息
	Update(ctx context.Context, in *Distributor, opts ...client.CallOption) (*DistributorResponse, error)
	//批量设置销售员等级
	SetRank(ctx context.Context, in *Distributor, opts ...client.CallOption) (*DistributorResponse, error)
	//清退销售员
	Remove(ctx context.Context, in *DistributorWhere, opts ...client.CallOption) (*DistributorResponse, error)
	//获取销售员信息
	Get(ctx context.Context, in *Distributor, opts ...client.CallOption) (*DistributorResponse, error)
	//分页查询销售员列表
	Search(ctx context.Context, in *DistributorWhere, opts ...client.CallOption) (*DistributorResponse, error)
}

type distributorService struct {
	c    client.Client
	name string
}

func NewDistributorService(name string, c client.Client) DistributorService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "geiqin.srv.dms"
	}
	return &distributorService{
		c:    c,
		name: name,
	}
}

func (c *distributorService) Update(ctx context.Context, in *Distributor, opts ...client.CallOption) (*DistributorResponse, error) {
	req := c.c.NewRequest(c.name, "DistributorService.Update", in)
	out := new(DistributorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorService) SetRank(ctx context.Context, in *Distributor, opts ...client.CallOption) (*DistributorResponse, error) {
	req := c.c.NewRequest(c.name, "DistributorService.SetRank", in)
	out := new(DistributorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorService) Remove(ctx context.Context, in *DistributorWhere, opts ...client.CallOption) (*DistributorResponse, error) {
	req := c.c.NewRequest(c.name, "DistributorService.Remove", in)
	out := new(DistributorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorService) Get(ctx context.Context, in *Distributor, opts ...client.CallOption) (*DistributorResponse, error) {
	req := c.c.NewRequest(c.name, "DistributorService.Get", in)
	out := new(DistributorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorService) Search(ctx context.Context, in *DistributorWhere, opts ...client.CallOption) (*DistributorResponse, error) {
	req := c.c.NewRequest(c.name, "DistributorService.Search", in)
	out := new(DistributorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DistributorService service

type DistributorServiceHandler interface {
	//编辑销售员信息
	Update(context.Context, *Distributor, *DistributorResponse) error
	//批量设置销售员等级
	SetRank(context.Context, *Distributor, *DistributorResponse) error
	//清退销售员
	Remove(context.Context, *DistributorWhere, *DistributorResponse) error
	//获取销售员信息
	Get(context.Context, *Distributor, *DistributorResponse) error
	//分页查询销售员列表
	Search(context.Context, *DistributorWhere, *DistributorResponse) error
}

func RegisterDistributorServiceHandler(s server.Server, hdlr DistributorServiceHandler, opts ...server.HandlerOption) error {
	type distributorService interface {
		Update(ctx context.Context, in *Distributor, out *DistributorResponse) error
		SetRank(ctx context.Context, in *Distributor, out *DistributorResponse) error
		Remove(ctx context.Context, in *DistributorWhere, out *DistributorResponse) error
		Get(ctx context.Context, in *Distributor, out *DistributorResponse) error
		Search(ctx context.Context, in *DistributorWhere, out *DistributorResponse) error
	}
	type DistributorService struct {
		distributorService
	}
	h := &distributorServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DistributorService{h}, opts...))
}

type distributorServiceHandler struct {
	DistributorServiceHandler
}

func (h *distributorServiceHandler) Update(ctx context.Context, in *Distributor, out *DistributorResponse) error {
	return h.DistributorServiceHandler.Update(ctx, in, out)
}

func (h *distributorServiceHandler) SetRank(ctx context.Context, in *Distributor, out *DistributorResponse) error {
	return h.DistributorServiceHandler.SetRank(ctx, in, out)
}

func (h *distributorServiceHandler) Remove(ctx context.Context, in *DistributorWhere, out *DistributorResponse) error {
	return h.DistributorServiceHandler.Remove(ctx, in, out)
}

func (h *distributorServiceHandler) Get(ctx context.Context, in *Distributor, out *DistributorResponse) error {
	return h.DistributorServiceHandler.Get(ctx, in, out)
}

func (h *distributorServiceHandler) Search(ctx context.Context, in *DistributorWhere, out *DistributorResponse) error {
	return h.DistributorServiceHandler.Search(ctx, in, out)
}
